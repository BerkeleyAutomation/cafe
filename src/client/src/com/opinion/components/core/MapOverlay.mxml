<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" 
		   xmlns:utils="com.opinion.utils.*" 
		   xmlns:pages="com.opinion.components.pages.*"
		   initialize="init()"> 
	
	<mx:states>
		<!-- used to clear the state of the overlay-->
		<mx:State name="empty" enterState="initState()"/>
		
		<mx:State name="statements" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:StatementsPage id="statementsPage" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="demographics" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:Demographics id="demographicsPage" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="signup" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:SignupPage id="signupPage" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="welcome" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:SerializedWelcome id="serializedWelcome" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="additional" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<mx:VBox id="additionalContainer" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="finished" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:SerializedFinished id="serializedFinished" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="upload" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:Upload width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="walkthrough" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:Walkthrough id="walkthroughPage" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="statementsIntro" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:StatementsIntro id="statementsIntroPage" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="overlaynotification" enterState="initState()">
			<mx:AddChild relativeTo="{overlayContainer}" position="lastChild" creationPolicy="all">
				<pages:OverlayNotification id="overlayNotificationPage" width="100%" height="100%"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import com.opinion.settings.Configuration;
			import com.opinion.utils.Log;
			import com.opinion.components.core.SocialMedia;
			
			public function init():void
			{
				// Add any additional questions to map overlay **within the 'additional' state**
                if (Configuration.HAVE_ADDITIONAL_PROFILE_QUESTIONS) 
                {
					for (var i:int = 0; i < Configuration.MAP_OVERLAY_ADDITIONAL_QUESTIONS.length; i++)
					{
						var parent:DisplayObjectContainer = additionalContainer;
						for (var n:int = 0; n < Configuration.MAP_OVERLAY_ADDITIONAL_QUESTIONS[i]['parent'].length; n++)
						{
							parent = DisplayObjectContainer(parent.getChildByName(Configuration.MAP_OVERLAY_ADDITIONAL_QUESTIONS[i]['parent'][n]));
						} 
						parent.addChild(Configuration.MAP_OVERLAY_ADDITIONAL_QUESTIONS[i]['child']);
					}
                }
			}
			
			/**
			 *  Contains all helper functions necessary for each state 
			 */
			 
			/* General MapOverlay functions */
			public function clearState():void 
			{
				containerWithDone.styleName = "";
				this.currentState = 'empty';
				stateTitle.htmlText = "";
				turnOffMapOverlayMask();
				this.parentApplication.opinionMap.scoreDisplayBox.visible = true;
				this.parentApplication.opinionMap.scoreDisplayBox.includeInLayout = true;
			}
			
			private function initState():void
			{
				
				showMapLeftPanelItems();
				containerWithDone.styleName = "";
				
				switch(this.currentState)
				{
					case 'welcome':
						if (Configuration.SERIALIZED_OPINION_PROFILE)
							doneButton.label = 'Next';
						break;
					case 'statements':
						if (Configuration.SERIALIZED_OPINION_PROFILE)
							doneButton.label = 'Next';
						
						// For statements and comments 
						hideMapLeftPanelItems();
						containerWithDone.styleName = "mapLeftPanelSubBoxLessPadding";
						
						break;
					case 'finished':
						doneButton.label = 'Okay';
						break;
					case 'upload':
						hideMapLeftPanelItems();
						containerWithDone.styleName = "mapLeftPanelSubBoxLessPadding";
						doneButton.label = 'Done';
						break;
					default:
						doneButton.label = 'Done';
				}
			}
			
			public function doneButtonClick():void
			{				
				switch(this.currentState)
				{
					// Add any needed cleanup here
					case 'statements':
						// If statements box used		
						if (statementsPage.statementsBox.visible && statementsPage.statementsBox.includeInLayout)
						{
							
							/* 
							2011.12.10 For all users where we show the statements page, make sure they have entered at least one slider value
							NOTE: most public versions will not use the statements page anymore
							*/
							if(!statementsPage.slidersMoved)
							{
								displayErrorMessage(Configuration.STATEMENTS_ERROR_MESSAGE, this.parentApplication.opinionMap.mapOverlayPromptSubErrorText);
								break;
							}
							
							// Housekeeping
							if (!Configuration.ALLOW_EDIT_SLIDERS)
								this.parentApplication.ratingModule.moveBackgroundSlidersToForegroundPositions();
							this.parentApplication.opinionMap.hasFinishedStatements = true;
							
							// Next step logic
							if (Configuration.SERIALIZED_OPINION_PROFILE)
							{
								showCommentsPage();
							} else 
							{
								clearState();
								
								// Hide opinion prompt
								this.parentApplication.opinionMap.mapOverlayPrompt.visible = false;
								this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = false;
								
								// Reshow left panel
								showMapLeftPanelItems();
								
								// Show signup for first time user
								if(!this.parentApplication.isUserAuthenticated)
								{
									this.parentApplication.opinionMap.firstTimeIntroPromptText.text = Configuration.REGISTER_SEED_PROMPT;
									showSignupPage();
								}
							}
							break;
						}
						
						// If user finished with comment box
						if (statementsPage.commentBox.visible && statementsPage.commentBox.includeInLayout)
						{
							
							// Check for proper comment (we enforce a proper comment as there's now the "skip" button) - 2011.12.13
							if (statementsPage.commentInput.text == Configuration.COMMENT_ENTRY_PROMPT || statementsPage.commentInput.text.split(" ").length < Configuration.MIN_COMMENT_WORD_COUNT)
							{
								//skipButtonClick();
								displayErrorMessage(Configuration.COMMENT_ERROR_MESSAGE,stateError);
								break;
							}
							
							// Housekeeping
							statementsPage.saveCommentsPage();
							this.parentApplication.opinionMap.fadeInDots();
							//this.parentApplication.opinionMap.leaderboardButton.visible = true;
							//this.parentApplication.opinionMap.leaderboardButton.includeInLayout = false;
							
							// Next step logic
							if (Configuration.SERIALIZED_OPINION_PROFILE) 
							{
								// Continue to additional questions if not yet finished
								if (Configuration.HAVE_ADDITIONAL_PROFILE_QUESTIONS && !this.parentApplication.opinionMap.hasFinishedAdditional)
								{
									showAdditionalQuestions();
								} else
								{
									showSerializedFinishedPage();
								}
							} 
							else
							{
								// Close the comment box page
								if (this.parentApplication.isUserAuthenticated) 
								{
									// Show finished with comment prompt	
									//showOverlayNotification(Configuration.POST_LEAVERESPONSE_TITLE, Configuration.POST_LEAVERESPONSE_TEXT, 'postleaveresponse');
									//this.parentApplication.opinionMap.currentTopicContent.visible = false;
									//this.parentApplication.opinionMap.currentTopicContent.includeInLayout = false;
									this.parentApplication.opinionMap.transitionDemoText(Configuration.INSTRUCTIONS_7,true,20000);
																		
									this.parentApplication.opinionMap.mapOverlay.clearState();
									//this.parentApplication.opinionMap.mapOverlay.showCommentsPage();
									statementsPage.saveCommentsPage();
																	
									// Hide opinion prompt
									this.parentApplication.opinionMap.mapOverlayPrompt.visible = false;
									this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = false;
									
									// Reshow left panel
									showMapLeftPanelItems();
									
									// Show the user's score
									this.parentApplication.opinionMap.scoreDisplayBox.visible = true;
									this.parentApplication.opinionMap.scoreDisplayBox.includeInLayout = true;
								}

								/*
								else if (Configuration.NO_STATEMENTS) // No statements, after entering your comment you sign up
								{
									this.parentApplication.opinionMap.hasFinishedStatements = true;
									this.parentApplication.opinionMap.firstTimeIntroPromptText.text = Configuration.REGISTER_SEED_PROMPT;
									showSignupPage();
								}
								*/

							}
							
							break;
						}
						
					case 'welcome':
						//Alert.show('welcome');
						if (!this.parentApplication.opinionMap.hasFinishedStatements)
						{
							showStatementsPage();
							break;
						}
						
						if (!this.parentApplication.opinionMap.hasFinishedComment)
						{
							showCommentsPage();
							break;
						}
							
						if (!this.parentApplication.opinionMap.hasFinishedAdditional && Configuration.HAVE_ADDITIONAL_PROFILE_QUESTIONS)
						{
							showAdditionalQuestions();
							break;
						}
					
					case 'finished':
						this.parentApplication.opinionMap.showArrowBoxTemporarily();
						//this.parentApplication.opinionMap.showMapNotification(Configuration.FINISHED_SERIALIZED_MSG, Configuration.MAP_NOTIFICATION_TIMEOUT);
						clearState();
						break;
					case 'upload':
						showMapLeftPanelItems();
						clearState();
						break;
					case 'statementsIntro':
						clearState();
						showStatementsPage();
						break;
					case 'walkthrough':
						clearState();
						/*// Show the prompt to explore seeds
						if(this.parentApplication.usernameSearch)
						{
							this.parentApplication.opinionMap.showTooltipOnUser();
						}
						else
						{
							
							this.parentApplication.opinionMap.firstTimeIntroPrompt.visible = true;
							this.parentApplication.opinionMap.firstTimeIntroPrompt.includeInLayout = true;
							this.parentApplication.opinionMap.firstTimeIntroPromptText.text = Configuration.FIRST_TIME_RATING_NOTICE;
							
							this.parentApplication.opinionMap.mapOverlayPrompt.visible = true;
							this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = true;
							this.parentApplication.opinionMap.mapOverlayPromptText.text = Configuration.FIRST_TIME_RATE_STEP;
							this.parentApplication.opinionMap.mapOverlayPromptSubText.htmlText = "<font color=\"#b9b7b3\">" + Configuration.FIRST_TIME_RATE_PROMPT+ "</font><br/>"; //+ "<font size=\"16\">" + this.parentApplication.opinionMap.currentTopicText.text + "</font><br/>" ;
							
						}*/
						break;
				}
			}
			
			private function skipButtonClick():void
			{
				switch(this.currentState)
				{
					case 'statements':
						
						// If comment box used
						if (statementsPage.commentBox.visible && statementsPage.commentBox.includeInLayout)
						{
							this.parentApplication.opinionMap.fadeInDots();
							// Check if serialization required
							if (!Configuration.SERIALIZED_OPINION_PROFILE) 
							{
								if (this.parentApplication.isUserAuthenticated) // Normal Operation, save the comment
								{
				            		// Clear overlay
									clearState();
									this.parentApplication.opinionMap.transitionDemoText(Configuration.INSTRUCTIONS_7,true,10000);
																	
									// Hide opinion prompt
									this.parentApplication.opinionMap.mapOverlayPrompt.visible = false;
									this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = false;
									
									// Reshow left panel
									showMapLeftPanelItems();
									
									// Show the user's score
									this.parentApplication.opinionMap.scoreDisplayBox.visible = true;
									this.parentApplication.opinionMap.scoreDisplayBox.includeInLayout = true;
								}
							}
						}
						break;	
				}
			}
			 
			/* Functions for statementsPage */
			
			/* Wrap statements page functions with null checks in case it hasn't been instantiated yet */
			public function resetStatementsPageCommentText():void
			{
				if (this.statementsPage != null)
					this.statementsPage.resetCommentText();
			}
			
			public function resetStatementsPageSliders():void
			{
				if (this.statementsPage != null)
				{
					this.statementsPage.resetSliders();
				}

			}
			
			public function setDiscussionStatementDisplayText(text:String):void
			{
				/*
				if (this.statementsPage != null)
					this.statementsPage.discussionStatementDisplayText.text = text;
				*/
			}
			
			public function setCommentInputText(text:String):void
			{
				this.statementsPage.commentInput.text = text;
			}
			
			/* Function for demographicsPage */
			public function isDemographicsFinished():Boolean
			{
				if (this.demographicsPage != null)
					return this.demographicsPage.getIfCompeleted();
				else
					return false;
			} 
			
			public function showStatementsIntroPage():void
			{
				this.currentState = 'statementsIntro';
			}
						
			/* Show event functions */			
			public function showStatementsPage(event:Event = null):void
			{
				boundingBox.visible = false;
				this.currentState = 'statements';
				this.statementsPage.setViewToStatements();
				this.parentApplication.opinionMap.fadeDots();
				//this.parentApplication.headerTopicText.visible= false;
				
				/*
				if (Configuration.SERIALIZED_OPINION_PROFILE)
					stateTitle.htmlText = Configuration.SERIALIZED_STATEMENTS_TITLE;
				*/
				//not auth and not in projector mode
				if(!this.parentApplication.isUserAuthenticated)
				{
					this.parentApplication.ratingModule.createAndPlaceFakeUserDot();
					var num_users:String = this.parentApplication.opinionMap.welcomeFormatter.format(Configuration.opinionsExpressedCalculation(this.parentApplication.ideasTotal));
					var myPattern:RegExp = /-p/;  
					this.parentApplication.opinionMap.transitionDemoText(Configuration.INSTRUCTIONS_4.replace(myPattern,num_users),true);
				}
				
				this.parentApplication.ratingModule.resetSliders();
				
				
				
				// Show prompt
				//this.parentApplication.opinionMap.mapOverlayPrompt.
				
				// adjust overlay position
				//if(this.parentApplication.opinionMap.plotCanvas.width < 1100 && this.parentApplication.numStatements <= 5)
				//{
					//turnOnMapOverlayMask();
					//setMapOverlayInCenter();
				//}
				//else
				//{
					setMapOverlayToRightPosition();
					//this.parentApplication.opinionMap.mapOverlayPrompt.visible = true;
					//this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = true;
					//this.parentApplication.opinionMap.mapOverlayPromptText.text = Configuration.FIRST_TIME_STATEMENT_STEP;
					//this.parentApplication.opinionMap.mapOverlayPromptSubText.text = Configuration.FIRST_TIME_STATEMENTS_INSTRUCTIONS;
				//}
				/*if (!Configuration.VERTICAL_ORIENTATION)
				{
					
				}
				else
				{
					this.parentApplication.opinionMap.plotCanvas.validateNow();
					setMapOverlayUnderTopText();
				}*/
				setTimeout(showButtons,500);//processing buffer delay
			}
			
			public function showButtons():void
			{
				boundingBox.visible = true;
			}
			
			public function showDemographicsPage(event:Event = null):void
			{	
				this.currentState = 'demographics';
				demographicsPage.onShow();
			}
			
			public function showCommentsPage(event:Event = null):void
			{				
				this.currentState = 'statements';
				this.statementsPage.setViewToComments();
				this.parentApplication.headerTopicText.visible= true;
				//this.parentApplication.opinionMap.queryRefreshAndBang = true;
				this.parentApplication.opinionMap.fadeDots();
								
				//this.parentApplication.opinionMap.transitionDemoText("",true);				
				// Set the commentBox height and width
				//statementsPage.commentBox.width = this.parentApplication.opinionMap.mapRightArea.width * .8;
				//statementsPage.commentBox.height = this.parentApplication.opinionMap.mapRightArea.height * .85;
				
				/*
				if (Configuration.SERIALIZED_OPINION_PROFILE)
					stateTitle.htmlText = Configuration.SERIALIZED_COMMENT_TITLE;
				*/
				
				// Hide the score
				//this.parentApplication.opinionMap.scoreDisplayBox.visible = false;
				//this.parentApplication.opinionMap.scoreDisplayBox.includeInLayout = false;
				
				// Show opinion prompt
				//this.parentApplication.opinionMap.mapOverlayPrompt.visible = true;
				//this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = true;
				//this.parentApplication.opinionMap.mapOverlayPromptText.text = Configuration.COMMENT_NOT_FINISHED_TEXT;
				//this.parentApplication.opinionMap.mapOverlayPromptSubText.htmlText = this.parentApplication.opinionMap.currentTopicText.text;
				
				// adjust overlay position
				if (!Configuration.VERTICAL_ORIENTATION)
				{
					setMapOverlayToRightPosition();
				}
				else
				{
					this.parentApplication.opinionMap.plotCanvas.validateNow();
					setMapOverlayUnderTopText();
				}
			}
			
			public function showSerializedWelcomePage(event:Event = null):void
			{
				this.currentState = 'welcome';
				
				if (Configuration.SERIALIZED_OPINION_PROFILE)
				{
					turnOnMapOverlayMask();
				}	
				
				// adjust overlay position
				setMapOverlayInCenter();
			}
			
			public function showAdditionalQuestions(event:Event = null):void
			{
				this.currentState = 'additional';
				
				if (Configuration.SERIALIZED_OPINION_PROFILE)
					stateTitle.htmlText = Configuration.SERIALIZED_ADDITIONAL_TITLE;
				
				//this.parentApplication.opinionMap.mapOverlayPrompt.x = this.parentApplication.opinionMap.mapLeftPanel.width + 30; 
				this.parentApplication.opinionMap.mapOverlayPrompt.visible = true;
				this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = true;
				this.parentApplication.opinionMap.mapOverlayPromptText.text = Configuration.ADDITIONAL_QUESTIONS_STEP;
				this.parentApplication.opinionMap.mapOverlayPromptSubText.text = Configuration.ADDITIONAL_QUESTIONS_PROMPT;
					
				// adjust overlay position
				resetMapOverlayPosition();
			}
			
			public function showSerializedFinishedPage(event:Event = null):void
			{
				// Hide opinion prompt
				this.parentApplication.opinionMap.mapOverlayPrompt.visible = false;
				this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = false;
				
				this.currentState = 'finished';
				stateTitle.htmlText = "";
				
				// adjust overlay position
				setMapOverlayInCenter();
			}
			
			public function showSignupPage(event:Event = null):void
			{
				this.currentState = 'signup';
				signupPage.socialMedia.intializeModule(SocialMedia.REGISTRATION);
				
				//this.parentApplication.opinionMap.mapOverlayPrompt.visible = true;
				//this.parentApplication.opinionMap.mapOverlayPrompt.includeInLayout = true;
				//this.parentApplication.opinionMap.mapOverlayPromptText.text = Configuration.FIRST_TIME_SIGNUP_STEP;
				//this.parentApplication.opinionMap.mapOverlayPromptSubText.text = Configuration.FIRST_TIME_SIGNUP_INSTRUCTIONS;
				
				this.parentApplication.opinionMap.transitionDemoText(Configuration.INSTRUCTIONS_5,true);
								
				// adjust overlay position
				if (!Configuration.VERTICAL_ORIENTATION)
				{
					setMapOverlayToRightPosition();
				}
				else
				{
					this.parentApplication.opinionMap.plotCanvas.validateNow();
					setMapOverlayUnderTopText();
				}
				
			}
			
			public function showUpload(event:Event = null):void
			{
				this.currentState = 'upload';
				// adjust overlay position
				setMapOverlayToRightPosition();
			}
			
			public function showWalkthrough(event:Event = null):void
			{
				this.currentState = 'walkthrough';
				
				//turnOnMapOverlayMask();
				// adjust overlay position
				setMapOverlayInCenter();
			}
			
			public function showOverlayNotification(title:String, text:String, state:String):void
			{
				this.currentState = 'overlaynotification';
				overlayNotificationPage.init(title, text, state);
				
				turnOnMapOverlayMask();
				
				// adjust overlay position
				setMapOverlayInCenter();
			}
			
			public function displayErrorMessage(msg:String, target:Text=null):void 
			{
				if (target == null)
				{
					stateError.htmlText = msg;
					setTimeout(clearErrorMsg, 3000);
				} else
				{
					target.htmlText = msg;
					target.visible = true;
					target.includeInLayout = true;
					setTimeout(clearErrorMsg, 3000, target);
				}
				
				if (Configuration.VERTICAL_ORIENTATION)
				{
					this.parentApplication.opinionMap.plotCanvas.validateNow();
					setMapOverlayUnderTopText();
				}
			}
			
			private function clearErrorMsg(target:Text = null):void
			{
				if (target == null)
				{
					stateError.htmlText = "";
				} else
				{
					target.htmlText = "";
					target.visible = false;
					target.includeInLayout = false;
				}
				
				if (Configuration.VERTICAL_ORIENTATION)
				{
					this.parentApplication.opinionMap.plotCanvas.validateNow();
					setMapOverlayUnderTopText();
				}
			}
			
			private function turnOnMapOverlayMask():void
			{
				this.parentApplication.opinionMap.mapOverlayMask.includeInLayout = true;
				this.parentApplication.opinionMap.mapOverlayMask.visible = true;
			}
			
			private function turnOffMapOverlayMask():void
			{
				this.parentApplication.opinionMap.mapOverlayMask.visible = false;
				this.parentApplication.opinionMap.mapOverlayMask.includeInLayout = false;
			}
			
			/**
			 * Should not be used. Setting both the left and right properties of the overlay will override the width property
			 * and stretch the overlay to the space between the defined left and right fields. 
			 */
			private function setMapOverlayToLeftPosition():void
			{
				this.parentApplication.opinionMap.mapRightArea.setStyle('left', 20);
				this.parentApplication.opinionMap.mapRightArea.setStyle('top', 5);
				this.parentApplication.opinionMap.mapRightArea.width = this.parentApplication.opinionMap.plotCanvas.width * .33;
			}
			
			private function setMapOverlayToRightPosition():void
			{
				this.parentApplication.opinionMap.mapRightArea.clearStyle('right');
				this.parentApplication.opinionMap.mapRightArea.clearStyle('left');
				this.parentApplication.opinionMap.mapRightArea.clearStyle('top');
				this.parentApplication.opinionMap.mapRightArea.setStyle('top', 80);
				this.parentApplication.opinionMap.mapRightArea.width = Math.max(this.parentApplication.opinionMap.width * .33,410);
				this.parentApplication.opinionMap.mapRightArea.setStyle('right', 20);
				this.parentApplication.opinionMap.mapRightArea.height = this.parentApplication.opinionMap.height - 80;
			}
			
			/**
			 * For when Configuration.VERTICAL_ORIENTATION = true
			 */ 
			private function setMapOverlayUnderTopText():void
			{
				this.parentApplication.opinionMap.mapRightArea.clearStyle('right');
				this.parentApplication.opinionMap.mapRightArea.clearStyle('left');
				this.parentApplication.opinionMap.mapRightArea.clearStyle('top');
				this.parentApplication.opinionMap.mapRightArea.setStyle('left', 0);
				this.parentApplication.opinionMap.mapRightArea.setStyle('right', 0);
				this.parentApplication.opinionMap.mapRightArea.setStyle('top', this.parentApplication.opinionMap.mapOverlayPrompt.height);
			}
			
			private function resetMapOverlayPosition():void
			{
				this.parentApplication.opinionMap.mapRightArea.clearStyle('right');
				this.parentApplication.opinionMap.mapRightArea.clearStyle('left');
				this.parentApplication.opinionMap.mapRightArea.clearStyle('top');
				this.parentApplication.opinionMap.mapRightArea.setStyle('left', 0);
				this.parentApplication.opinionMap.mapRightArea.setStyle('top', 0);
				this.parentApplication.opinionMap.mapRightArea.percentWidth = 67;	
			}
			
			private function setMapOverlayInCenter():void
			{
				this.parentApplication.opinionMap.mapRightArea.setStyle('right', 0);
				this.parentApplication.opinionMap.mapRightArea.setStyle('top', 100);
				this.parentApplication.opinionMap.mapRightArea.percentWidth = 100;
			}
			
			private function hideMapLeftPanelItems():void
			{
				this.parentApplication.opinionMap.mapLeftPanel.visible = false;
				this.parentApplication.opinionMap.upperToolBarContent.visible = false;
			}
			
			public function showMapLeftPanelItems():void
			{
				this.parentApplication.opinionMap.mapLeftPanel.visible = true;
				this.parentApplication.opinionMap.upperToolBarContent.visible = true;
			}
			
			public function resize():void
			{
				if (currentState == 'statements' || currentState == 'signup')
					setMapOverlayToRightPosition();
			}		
		]]>
	</mx:Script>
	<mx:Glow id="glowPanel" duration="0" alphaFrom="0" alphaTo=".17" blurXFrom="0.0" blurXTo="12.0" blurYFrom="0.0" blurYTo="12.0"  strength="3" color="0x000000" target="{containerWithDone}"/>
	<mx:VBox id="containerWithDone" color="0xffffff" fontSize="13" height="80%" width="100%" horizontalAlign="center" verticalAlign="middle" creationCompleteEffect="{glowPanel}">
		<mx:Text id="stateTitle" fontFamily="Arial" width="100%" color="0x646462"/>
		<mx:VBox id="overlayContainer" width="100%" />
		<mx:Text id="stateError" fontFamily="Arial" width="100%" color="0x646462" fontWeight="bold" visible="false" includeInLayout="false" />
		<mx:HBox id="boundingBox">
			<utils:LoggedButton name="map-overlay_done" styleName="blueButtonLarge" id="doneButton" label="Done" click="doneButtonClick()" visible="{!(this.currentState == 'empty' || this.currentState == 'signup' || this.currentState == 'additional' || this.currentState == 'welcome' || this.currentState == 'finished' || this.currentState == 'walkthrough' || this.currentState == 'statementsIntro' || this.currentState == 'overlaynotification')}" includeInLayout="{!(this.currentState == 'empty' || this.currentState == 'signup' || this.currentState == 'additional' || this.currentState == 'welcome' || this.currentState == 'finished' || this.currentState == 'walkthrough' || this.currentState == 'statementsIntro' || this.currentState == 'overlaynotification')}"/>
			<utils:LoggedButton name="map-overlay_skip" styleName="grayButtonLarge" id="skipButton" label="Remind me later" click="skipButtonClick()" visible="{!(!(this.currentState == 'statements') || !statementsPage.commentBox.visible || !statementsPage.commentBox.includeInLayout || Configuration.NO_SKIP)}" includeInLayout="{!(!(this.currentState == 'statements') || !statementsPage.commentBox.visible || !statementsPage.commentBox.includeInLayout || Configuration.NO_SKIP)}"/>
			<!--<utils:LoggedButton name="map-overlay_skip" styleName="grayButtonLarge" id="skipButton" label="Skip" click="skipButtonClick()" visible="false" includeInLayout="false"/>-->
		</mx:HBox>
	</mx:VBox>
	
</mx:Module>
