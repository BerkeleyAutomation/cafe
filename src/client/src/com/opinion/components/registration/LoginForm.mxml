<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:registration="com.opinion.components.registration.*"
        creationComplete="creationComplete()" 
		xmlns:utils="com.opinion.utils.*" 
		initialize="init()" preinitialize="preinit()" xmlns:core="com.opinion.components.core.*">
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.opinion.settings.Configuration;
			import com.opinion.settings.Constants;
			import com.opinion.utils.AuthenticationUtils;
			import com.opinion.utils.HTTPUtils;
			import com.opinion.utils.Log;
			import com.opinion.components.core.SocialMedia;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
	
			private var insightRatingsDict:Dictionary;
			[Bindable] public var ENTRY_CODE_HELLO_TEXT:String = "";
			[Bindable] public var ENTRY_CODE_ABOVE_ENTER_TEXT:String = "";
			[Bindable] public var firstTime:Boolean = false;
			[Bindable] private var smsPasswordChange:Boolean = false;
			[Bindable] private var registrationNetworkError:String = "";
			private var loginInProgress:Boolean = false;
			
			public var FORM_WIDTH:int = 460;
			
			private function preinit():void
			{
				if (Configuration.VERTICAL_ORIENTATION)
					this.FORM_WIDTH = 300;
			}
			
			public function login():void {				
			    // Clear all error fields
                _error___all__.text = "";
                _error_username.text = "";
                _error_password.text = "";
				
				if(loginInProgress)
					return;
				
				loginInProgress = true;
                    
				var parameters:Object = new Object();
				parameters['username'] = _username.text.toLowerCase();
				parameters['password'] = _password.text;
				
				if(Configuration.SOFT_ENTRY_CODES)
					parameters['entrycode'] = this.parentApplication.ENTRY_CODE;
				
				parameters['os_id'] = this.parentApplication.opinionSpaceId;
				
				sendLogin._failure_function = loginFailed;
				sendLogin._retry_function = login;
				sendLogin.maxBackOff = true;
				sendLogin.send(parameters);
			}
			
			protected function callOnSuccess():void {
				networkError.visible = false;
				networkError.includeInLayout = false;
				loginInProgress = false;
				if((Configuration.USE_ENTRY_CODES && Configuration.FIRST_TIME_TRIAL_AVAILABLE && firstTime) || this.parentApplication.opinionMap.usernameSearchFirstTime)
					{
						var parameters:Object = new Object();
						var ratingsDict:Dictionary;
				
						ratingsDict = this.parentApplication.opinionMap.getFirstTimeAgreeRatings();

						// populate the parameters object				
						for (var key:String in ratingsDict)
						{
							parameters[key] = Number(ratingsDict[key]);
						}
						parameters['type'] = "agreement";
						parameters['entrycode'] = this.parentApplication.ENTRY_CODE;
						sendFirstTimeAgreement.send(parameters);

					 	
						parameters = new Object();				
						ratingsDict = this.parentApplication.opinionMap.getFirstTimeInsightRatings();
						// populate the parameters object				
						for (var key2:String in ratingsDict)
						{
							parameters[key2] = Number(ratingsDict[key2]);
						}
						parameters['type'] = "insight";
						parameters['entrycode'] = this.parentApplication.ENTRY_CODE;						
						sendFirstTimeInsight.send(parameters);
						
					}
				
					
				this.parentApplication.login();
				
				if(smsPasswordChange || (firstTime && Configuration.USE_ENTRY_CODES && (Configuration.ALLOW_USERNAME_CHANGE || Configuration.ALLOW_PASSWORD_CHANGE)))
				{
					// First time entry explanation text
					socialMedia.visible = false;
					socialMedia.includeInLayout = false;
					first_time_entry_text.visible = true;
					first_time_entry_text.includeInLayout = true;
					submit_update_form_button.visible = true;
					submit_update_form_button.includeInLayout = true;
					skip_update_form_button.visible = true;
					skip_update_form_button.includeInLayout = true;
					check_availability.username_input = _username_update;
					
					if (Configuration.ALLOW_USERNAME_CHANGE)
					{
						username_update_box.visible = true;
						username_update_box.includeInLayout = true;
						_username_update.text = _username.text;
					}
					
					if(Configuration.ALLOW_PASSWORD_CHANGE)
					{
						password_update_box.visible = true;
						password_update_box.includeInLayout = true;
						_username_update.text = _username.text;
					}
					
					hideAll();
				}
				else
				{
					if(this.parentApplication.popup != null)
						this.parentApplication.popup.removeMe();
					
				}
			}
			
			protected function handleSendLogin():void {
				loginInProgress = false;
				var decodedResult:Object = JSON.decode(sendLogin.lastResult.toString());
				smsPasswordChange = decodedResult['sms_can_change_password'];
				sendLogin.disconnect();
				var success:Boolean = AuthenticationUtils.handleErrorsFormFields(decodedResult, this, [_error___all__, _error_username, _error_password]);
				
				if (success) {
					callOnSuccess();
					
					if (Configuration.SPLASH_PAGE_RETURN)
					{
						this.parentApplication.welcomePage.continueIntoSpace();
					}			
				}
			}
					
			private function init():void {
				
				if (Configuration.SOFT_ENTRY_CODES && this.parentApplication.ENTRY_CODE != "")
				{
					login();
					return;
				}
				
				if(Configuration.USE_ENTRY_CODES)
				{
					disableAll();
				}
				
				socialMedia.intializeModule(SocialMedia.LOGIN);
				
				if (this.parentApplication.registeredUsername != null && this.parentApplication.registeredPassword != null) {
					var parameters:Object = new Object();
					parameters['username'] = this.parentApplication.registeredUsername.toLowerCase();
					parameters['password'] = this.parentApplication.registeredPassword;
					sendLogin.send(parameters);
				}
				
				if(Configuration.USE_ENTRY_CODES && (this.parentApplication.ENTRY_CODE == null || this.parentApplication.ENTRY_CODE == ""))
				{
					disableAll();
					_error_entry_code.text = "Using this application requires a proper entry code";
					_error_entry_code.visible = true;
					_error_entry_code.includeInLayout = true;
				}
				else if(Configuration.USE_ENTRY_CODES)
				{
					var parameters2:Object = new Object();
					parameters2['entrycode'] = this.parentApplication.ENTRY_CODE;
					sendEntryCode.send(parameters2);
					sendFirstLogin.send(parameters2);
				}
			}
			
			private function handleEntryCode():void{
				var decodedResult:Object = JSON.decode(sendEntryCode.lastResult.toString());
				if(decodedResult['username'] == null || decodedResult['username'] == "")
				{
					_error_entry_code.text = "Using this application requires a proper entry code";
					_error_entry_code.visible = true;
					_error_entry_code.includeInLayout = true;
				}
				else
				{
					if (decodedResult['username_format'] != null && decodedResult['username_format'] != "")
						_username.text = decodedResult['username_format'];
					else
						_username.text = decodedResult['username'];
					enableAll();
					_username.enabled = false;
				}
				
				ENTRY_CODE_HELLO_TEXT = Configuration.ENTRY_CODE_HELLO_TEXT.replace("$u",_username.text) + " " + Configuration.ENTRY_CODE_LOGIN_TEXT;
				ENTRY_CODE_ABOVE_ENTER_TEXT = Configuration.ENTRY_CODE_ABOVE_ENTER_TEXT.replace("$u",_username.text);

			}
			
			private function handleFirstLogin():void{
				var decodedResult:Object = JSON.decode(sendFirstLogin.lastResult.toString());
				if (decodedResult['first_time'])
				{
					firstTime = true;
					entry_code_hello.htmlText += " " + Configuration.ENTRY_CODE_LOGIN_TEXT_FIRST;
				} 
			}

			
			private function creationComplete():void {
			    focusManager.setFocus(_username);
			    login_form.addEventListener(KeyboardEvent.KEY_DOWN, checkFormKey);
			}
			
			private function submitForm():void {
                login();
            }
            
            /* If the enter key is pressed within the form, submit it */
            private function checkFormKey(event:KeyboardEvent):void {
                if(event.charCode == 13) {
                    submitForm();
                }
            }
			
			private function handleFaultOrTimeout(event:FaultEvent):void{
			}
			
			private function disableAll():void{
				_username.enabled = false;
				_password.enabled = false;
				signin.enabled = false;
			}
			
			private function enableAll():void{
				_username.enabled = true;
				_password.enabled = true;
				signin.enabled = true;
			}
			
			private function hideAll():void{
				intro.visible = false;
				intro.includeInLayout = false;
				intro_bottom.visible = false;
				intro_bottom.includeInLayout = false;
				pw_intro.visible = false;
				pw_intro.includeInLayout = false;
				regular_login_form_box.visible = false;
				regular_login_form_box.includeInLayout = false;
				entry_code_hello.visible = false;
				entry_code_hello.includeInLayout = false;
			}
			
			private function updateUsername():void{
				
				if( _username_update.enabled){
					submit_update_form_button.enabled = false;
					var parameters:Object = new Object();
					parameters['field'] = "username";
					parameters['new_value'] = _username_update.text;
					
					if (Configuration.USE_ENTRY_CODES)
						parameters['entrycode'] = this.parentApplication.ENTRY_CODE;
					
					sendUpdateUsername.send(parameters);
				}
			}
			
			private function updatePassword():void{
				if(_password_update.enabled){
					if(_password_update.text.length > 0){
						if(_password_update.text == _password_confirm.text){
							var parameters:Object = new Object();
							parameters['field'] = "password";
							parameters['new_value'] = _password_update.text;
							
							if (Configuration.USE_ENTRY_CODES)
								parameters['entrycode'] = this.parentApplication.ENTRY_CODE;
							
							sendUpdatePassword.send(parameters);
						}
						else
						{
							_error_update_password.text = "Passwords do not match";
							_error_update_password.visible = true;
							_error_update_password.includeInLayout = true;
							submit_update_form_button.enabled = true;	
						}
					} 
					else
					{
						_error_update_password.text = "Blank Password not permitted";
						_error_update_password.visible = true;
						_error_update_password.includeInLayout = true;
						submit_update_form_button.enabled = true;	
					}
					
				}
				else
				{
					if(Configuration.ALLOW_USERNAME_CHANGE)
						updateUsername();
				}
			
			}
			
			private function handleUsernameUpdate():void{
				
				var decodedResult:Object = JSON.decode(sendUpdateUsername.lastResult.toString());
				
				// TODO: Better error handling for auth errors
				if (AuthenticationUtils.resultIsAuthRequired(decodedResult))
					return;
				
				if(decodedResult['error'] != null)
				{
					_error_update_username.text = decodedResult['error'];
					_error_update_username.visible = true;
					_error_update_username.includeInLayout = true;
					submit_update_form_button.enabled = true;		
				}
				else
				{
					this.parentApplication.popup.removeMe();
					firstTime = false;
					this.parentApplication.registeredUsername = _username_update.text;
					this.parentApplication.opinionMap.userRegisteredUsernameText.text = _username_update.text;
				}
			}
			
			private function handlePasswordUpdate():void{
			
				var decodedResult:Object = JSON.decode(sendUpdatePassword.lastResult.toString());
				
				// TODO: Better error handling for auth errors
				if (AuthenticationUtils.resultIsAuthRequired(decodedResult))
					return;
				
				if(decodedResult['error'] != null)
				{
					_error_update_password.text = decodedResult['error'];
					_error_update_password.visible = true;
					_error_update_password.includeInLayout = true;
					submit_update_form_button.enabled = true;		
				}
				else
				{
					if(Configuration.ALLOW_USERNAME_CHANGE)
						updateUsername();
				}
				
			}
			
			private function editPassword():void{
				_password_confirm.enabled = true;
				_password_confirm.text = "";
				_password_update.enabled = true;
				_password_update.text = "";
			}
			
			private function loginFailed():void
			{
				this.parentApplication.loadingScreen.visible = false;
				networkError.visible = true;
				networkError.includeInLayout = true;
				loginInProgress = false;
				enableAll();
				
				if(sendLogin.backOffTimer > 32)
				{
					networkError.visible = true;
					networkError.includeInLayout = true;
					registrationNetworkError = "Maximum retries exceeded";
					return;
				}
				
				for(var i:int = 0; i<sendLogin.backOffTimer; i++)
					setTimeout(displayCountDown,i*1000,sendLogin.backOffTimer - i);
				setTimeout(displayLoading,sendLogin.backOffTimer*1000);
			}
			
			private function displayCountDown(left:int):void
			{
				registrationNetworkError = "Network error retrying in: " + left + "s";
			}
			
			private function displayLoading():void
			{
				registrationNetworkError = "Attempting to reconnect...";
			}
		]]>
	</mx:Script>

	<utils:ExtendedHTTPService id="sendFirstTimeInsight" url="{this.parentApplication.httpUtils.getServiceUrl('os/firsttime/' + this.parentApplication.opinionSpaceId + '/')}" useProxy="false" method="POST" resultFormat="text" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="sendFirstTimeAgreement" url="{this.parentApplication.httpUtils.getServiceUrl('os/firsttime/' + this.parentApplication.opinionSpaceId + '/')}" useProxy="false" method="POST" resultFormat="text" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="clearAuthState" url="{this.parentApplication.httpUtils.getServiceUrl('accountsjson/clearautherr/')}" useProxy="false" method="POST" resultFormat="text" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="sendUpdatePassword" url="{this.parentApplication.httpUtils.getServiceUrl('accountsjson/update/')}" useProxy="false" method="POST" resultFormat="text" result="handlePasswordUpdate()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="sendUpdateUsername" url="{this.parentApplication.httpUtils.getServiceUrl('accountsjson/update/')}" useProxy="false" method="POST" resultFormat="text" result="handleUsernameUpdate()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="sendFirstLogin" url="{this.parentApplication.httpUtils.getServiceUrl('accountsjson/entrycode/firstlogin/')}" useProxy="false" method="GET" resultFormat="text" result="handleFirstLogin()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="sendEntryCode" url="{this.parentApplication.httpUtils.getServiceUrl('accountsjson/entrycode/get/')}" useProxy="false" method="POST" resultFormat="text" result="handleEntryCode()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="sendLogin" url="{this.parentApplication.httpUtils.getServiceUrl('accountsjson/login/')}" useProxy="false" method="POST" resultFormat="text" result="handleSendLogin()" fault="handleFaultOrTimeout(event)"/>
	
	<mx:VBox verticalGap="0" width="100%">
	
		<!-- Top text -->
		<mx:Text id="intro" width="100%" htmlText="{Configuration.LOGIN_INTRO}" visible="{!Configuration.USE_ENTRY_CODES}" includeInLayout="{!Configuration.USE_ENTRY_CODES}" fontSize="14" paddingBottom="10"/>
		<mx:Text id="intro_bottom" width="100%" htmlText="{Configuration.LOGIN_INTRO_BOTTOM}" visible="{!Configuration.USE_ENTRY_CODES}" includeInLayout="{!Configuration.USE_ENTRY_CODES}" fontSize="14" paddingBottom="10"/>
		<mx:Text id="entry_code_hello" width="100%" htmlText="{ENTRY_CODE_HELLO_TEXT}" visible="{Configuration.USE_ENTRY_CODES}" includeInLayout="{Configuration.USE_ENTRY_CODES}" />
		<mx:Text id="networkError" width="100%" height="20" color="#FF0000" fontWeight="bold" styleName="error" text="{registrationNetworkError}" visible="false" includeInLayout="false"/>

		<mx:Form id="login_form" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" paddingLeft="0" paddingTop="5">
			
			<mx:VBox id="regular_login_form_box" horizontalAlign="left" width="100%">
					<mx:Text id="_error_entry_code" fontSize="12" color="#FF0000" width="100%" visible="false" includeInLayout="false"/>
	
					<mx:Text id="_error___all__" styleName="errorWhiteBg" width="100%"  visible="false" includeInLayout="false" text=""/>
				
				<!--Regular Username Stuff-->
					<mx:FormItem paddingLeft="0" fontFamily="Helvetica" fontSize="19" fontWeight="bold" label="{String(Configuration.LOGIN_FORM_USER_PROMPT).toUpperCase()}" required="{Configuration.SHOW_USERNAME_ASTERISK}" visible="{!Configuration.USE_ENTRY_CODES}" includeInLayout="{!Configuration.USE_ENTRY_CODES}">
						<mx:HBox width="{FORM_WIDTH}">
							<mx:TextInput id="_username" width="100%" text="" styleName="opinionBox"/>
							<mx:Text id="_username_update_text" width="100%" styleName="errorWhiteBg" visible="{!(!firstTime || !Configuration.ALLOW_USERNAME_CHANGE)}" includeInLayout="{!(!firstTime || !Configuration.ALLOW_USERNAME_CHANGE)}" text="You have the option of changing your username after you login"/>
							<mx:Text id="_error_username" width="100%" styleName="errorWhiteBg" visible="false" includeInLayout="false" text=""/>
						</mx:HBox>
					</mx:FormItem>
		
				<!--Regular Password Stuff-->
					<mx:FormItem paddingLeft="0" fontFamily="Helvetica" fontSize="19" fontWeight="bold" label="PASSWORD" required="{Configuration.SHOW_PASSWORD_ASTERISK}">
						<mx:HBox width="{FORM_WIDTH}">
							<mx:TextInput id="_password" width="100%" text="" displayAsPassword="true" styleName="opinionBox"/>
							<mx:Text id="_error_password" width="100%" styleName="errorWhiteBg" visible="false" includeInLayout="false" text=""/>
						</mx:HBox>
					</mx:FormItem>		
					<mx:Text id="pw_intro" width="100%" text="Please be aware that passwords are case sensitive." visible="{Configuration.SHOW_CASE_SENSITIVE_WARNING}" includeInLayout="{Configuration.SHOW_CASE_SENSITIVE_WARNING}"/>			
					<mx:VBox width="100%" horizontalAlign="left">
						<mx:Text width="100%" text="{ENTRY_CODE_ABOVE_ENTER_TEXT}" visible="{Configuration.USE_ENTRY_CODES}" includeInLayout="{Configuration.USE_ENTRY_CODES}" fontWeight="bold" fontFamily="Arial" fontSize="13"/>
						<utils:LoggedButton name="login-signin" id="signin" label="Enter" styleName="grayButtonLarge" click="login()"/>	
					</mx:VBox>
				
			</mx:VBox>		
			
			<!--Entry code stuff starting-->
			<mx:VBox width="100%" visible="{Configuration.USE_ENTRY_CODES || smsPasswordChange}" includeInLayout="{Configuration.USE_ENTRY_CODES || smsPasswordChange}">
			
				<mx:Text id="first_time_entry_text" width="100%" visible="false" includeInLayout="false" htmlText="{Configuration.FIRST_TIME_ENTRY_TEXT}" fontWeight="bold"/>
			
			<!--Username Update-->
				<mx:VBox id="username_update_box" visible="false" includeInLayout="false" width="100%">
					
					<mx:Text width="100%" htmlText="{Configuration.USERNAME_UPDATE_INTRO_TEXT}"/>
					
					<mx:FormItem label="New Username">
						<mx:VBox width="{FORM_WIDTH}">
							<mx:TextInput id="_username_update" width="{Constants.EMAIL_FIELD_WIDTH}" text=""/>
							<mx:Text id="_error_update_username" styleName="errorWhiteBg" visible="false" includeInLayout="false" text=""/>
							<registration:CheckAvailability id="check_availability" visible="true" includeInLayout="true"/>
						</mx:VBox>
					</mx:FormItem>		
					
				</mx:VBox>
			
			<!--Password Change Stuff-->
				<mx:VBox id="password_update_box" visible="false" includeInLayout="false" width="100%">
					
					<mx:Text width="100%" htmlText="{Configuration.PASSWORD_UPDATE_INTRO_TEXT}"/>
					
					<mx:FormItem label="Change Password">
						<mx:VBox width="{FORM_WIDTH}">
							<mx:TextInput id="_password_update" width="{Constants.DEFAULT_FIELD_WIDTH}" text="111111111111111111111" displayAsPassword="true" enabled="false"/>
						</mx:VBox>
					</mx:FormItem>
					
					<mx:FormItem label="Confirm Password">
						<mx:HBox width="{FORM_WIDTH}">
							
							<mx:VBox>
								<mx:TextInput id="_password_confirm" width="{Constants.DEFAULT_FIELD_WIDTH}" text="111111111111111111111" displayAsPassword="true" enabled="false"/>
								<mx:Text id="_error_update_password" styleName="errorWhiteBg" text=""/>
							</mx:VBox>	
							
							<utils:LoggedButton id="edit_password" fontSize="10" label="Edit password" click="editPassword()"/>
						</mx:HBox>
					</mx:FormItem>
					
				</mx:VBox>
				
				<mx:HBox paddingTop="20">
					<utils:LoggedButton id="submit_update_form_button" label="{Configuration.UPDATE_BUTTON_PROMPT}" click="updatePassword()" visible="false" includeInLayout="false" styleName="blueButton"/>
					<utils:LoggedButton id="skip_update_form_button" label="{Configuration.SKIP_UPDATE_BUTTON_PROMPT}" click="this.parentApplication.popup.removeMe();" visible="false" includeInLayout="false"/>					
				</mx:HBox>
				
				
			</mx:VBox>
			
		</mx:Form>
		
		<mx:VBox width="100%" visible="{Configuration.SHOW_SCREEN_SIZE_NOTICE}" includeInLayout="{Configuration.SHOW_SCREEN_SIZE_NOTICE}">
			<mx:Text htmlText="{Configuration.SCREEN_SIZE_NOTICE + ' Your browser screen resolution is now '+this.parentApplication.appCanvas.width+' pixels x '+this.parentApplication.appCanvas.height+' pixels.'}" width="100%"/>
		</mx:VBox>
		
		<mx:VBox width="100%" horizontalAlign="center" paddingBottom="7" visible="{Configuration.ALLOW_EXTERNAL_LOGIN}" includeInLayout="{Configuration.ALLOW_EXTERNAL_LOGIN}">
			<mx:VBox styleName="mapLeftPanelHorizontalBoxLine" width="100%" height="1"/>	
		</mx:VBox>
	
		<core:SocialMedia id="socialMedia" visible="{Configuration.ALLOW_EXTERNAL_LOGIN}" includeInLayout="{Configuration.ALLOW_EXTERNAL_LOGIN}"/>
		
		<mx:VBox width="100%" horizontalAlign="center" paddingTop="7" paddingBottom="7" visible="{Configuration.ALLOW_EXTERNAL_LOGIN}" includeInLayout="{Configuration.ALLOW_EXTERNAL_LOGIN}">
			<mx:VBox styleName="mapLeftPanelHorizontalBoxLine" width="100%" height="1"/>	
		</mx:VBox>
		
		<registration:ContactSupport/>

	</mx:VBox>

</mx:Module>