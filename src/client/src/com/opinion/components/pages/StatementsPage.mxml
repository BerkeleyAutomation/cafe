<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:mx="http://www.adobe.com/2006/mxml" 
		   creationComplete="init()" 
		   addedToStage="addedToStage()" 
		   xmlns:panel="com.visualempathy.extensions.panel.*" 
		   xmlns:core="com.opinion.components.core.*"
		   xmlns:utils="com.opinion.utils.*"
		   horizontalAlign="center">
	<mx:Script>
		<![CDATA[
			import mx.controls.sliderClasses.Slider;
			import mx.core.BitmapAsset;
			import com.opinion.components.core.RatingModule;
			import mx.controls.Text;
			import mx.controls.Image;
			import mx.controls.LinkButton;
			import mx.containers.HBox;
			import com.opinion.components.core.LargeOpinionSlider;
			import com.opinion.components.core.OpinionSlider;
			import mx.containers.Canvas;
			import mx.controls.Label;
			import mx.controls.Alert;
			import com.opinion.utils.DisplayUtils;
			import com.opinion.utils.ConversionUtils;
			import com.opinion.utils.AuthenticationUtils;
			import com.opinion.utils.HTTPUtils;
			import com.opinion.settings.Constants;
			import mx.events.SliderEvent;
			import mx.events.FlexEvent;
			import com.opinion.utils.Log;
			import com.adobe.serialization.json.JSON;
			import com.opinion.settings.Configuration;
			import mx.collections.ArrayCollection;
			import mx.effects.Fade;
			import mx.events.SliderEventClickTarget;
		
			public var sliders:Array = [];
			public var sliderBoxes:Array = [];
			
			public var generatedPassword:String = "";
			
			public var slidersMoved:Boolean = false;
			private var charCountLive:int = 0;
			
		//	public static const DEFAULT_COMMENT_TEXT:String = "Please enter your response here.";
			
			[Embed(source="assets/img/arrow_left.png")] public static const ARROW_LEFT_IMAGE:Class;
			[Bindable] private var NUM_SLIDERS_PER_PAGE:int = 8;
			[Bindable] public var currentPage:int = 0;
			public var meanBoxes:Object = new Object();
			
			
			private function showSliderPage(page:int):void
			{
				for(var i:int = 0; i< sliders.length; i++)
				{
					if(i >= page * NUM_SLIDERS_PER_PAGE && i < (page + 1) * NUM_SLIDERS_PER_PAGE)
					{
						VBox(sliderBoxes[i]).visible = true;
						VBox(sliderBoxes[i]).includeInLayout = true;
					}
					else
					{
						VBox(sliderBoxes[i]).visible = false;
						VBox(sliderBoxes[i]).includeInLayout = false;
					}
				}
			}
			private function addedToStage():void {
				// Log that the statements page has been viewed
				//this.parentApplication.log.log(Log.INFO, this.parentApplication.opinionSpaceId, "STATEMENTS_PAGE_VIEW");
			}

			/**
			 * Creates the statement text (above each of the rating sliders)
			 */
			public function createStatementDisplayText(statementNum:int, statementText:String, statementNumTotal:int):Label {
				var statementDisplayText:Text = new Text();
				statementDisplayText.id = "st" + statementNum.toString();
				statementDisplayText.text = statementText;
				statementDisplayText.percentWidth = 100;
				statementDisplayText.styleName = "statementsPageStatement";
				
				return statementDisplayText;
			}
			
			/**
			 * Creates an HBox that contains a slider and thumbs up/down images, as well as
			 * "Strongly Disagree" and "Strongly Agree" text
			 */
			public function createSliderBox(slider:OpinionSlider, stateId:int, sliderMean:Number):VBox {
				var sliderVBox:VBox = new VBox();
				//sliderHBox.height = 35;
				//sliderHBox.styleName = "sliderHBox";
				sliderVBox.percentWidth = 100;
				sliderVBox.setStyle('verticalGap', 0);
				
				var leftText:Text = new Text();
				
				if(Configuration.STATEMENT_PAGE_LABELS[stateId]!= null)
					leftText.text = Configuration.STATEMENT_PAGE_LABELS[stateId]['leftText'];
				else
					leftText.text = Configuration.STATEMENT_PAGE_DEFAULT['leftText'];
				
				leftText.styleName = "statementsPageDisagreeText";
				//leftText.width = 55;
				
				/*
				var leftSliderImage:Image = new Image();
				//var thumbsDownImageBMP:BitmapAsset = new Constants.THUMBS_DOWN_IMAGE() as BitmapAsset;
				if(Configuration.STATEMENT_PAGE_LABELS.getItemAt(stateId -1)['leftPic'] != null)
					leftSliderImage.source = Configuration.STATEMENT_PAGE_LABELS.getItemAt(stateId -1)['leftPic'];
				*/
				
				var rightText:Text = new Text();
				
				if(Configuration.STATEMENT_PAGE_LABELS[stateId] != null)
					rightText.text = Configuration.STATEMENT_PAGE_LABELS[stateId]['rightText'];
				else
					rightText.text = Configuration.STATEMENT_PAGE_DEFAULT['rightText'];
				
				rightText.styleName = "statementsPageAgreeText";
				//rightText.width = 52;
				
				/*
				var rightSliderImage:Image = new Image();
				//var thumbsUpImageBMP:BitmapAsset = new Constants.THUMBS_UP_IMAGE() as BitmapAsset;
				if(Configuration.STATEMENT_PAGE_LABELS.getItemAt(stateId -1)['rightPic'] != null)
					rightSliderImage.source = Configuration.STATEMENT_PAGE_LABELS.getItemAt(stateId -1)['rightPic'];
				*/
				
				/*
				var sliderBox:HBox = new HBox();
				sliderBox.percentWidth = 80;
				sliderBox.addChild(slider);
				sliderVBox.addChild(sliderBox);
				
				var textHBox:HBox = new HBox();
				textHBox.percentWidth = 100;
				
				var textLHBox:HBox = new HBox();
				textLHBox.percentWidth = 100;
				textLHBox.setStyle('horizontalAlign', 'left');
				textLHBox.addChild(leftText);
				
				var textRHBox:HBox = new HBox();
				textRHBox.percentWidth = 100;
				textRHBox.setStyle('horizontalAlign', 'right');
				textRHBox.addChild(rightText);

				textHBox.addChild(textLHBox);
				textHBox.addChild(textRHBox);
				sliderVBox.addChild(textHBox);
				*/ 
				
				sliderVBox.addChild(slider);
								
				var meanBox:VBox = new VBox();
				meanBoxes[stateId] = meanBox;
				meanBox.percentWidth = int((sliderMean+.15)*100);
				//Alert.show(meanBox.percentWidth+"")
				var meanText:Text = new Text();
				meanText.text = "Average";
				meanText.styleName = "statementsPageAgreeText";
				meanText.setStyle('fontSize',11);
				meanText.setStyle('color',0xFF0000);
				
				var pointBox:VBox = new VBox();
				
				var point:Shape = new Shape();
				point.graphics.moveTo(0,0);
				point.graphics.beginGradientFill("linear",[0xFF0000, 0xFF4400], [1,1], [0,255]);
				point.graphics.lineTo(6,-15);
				point.graphics.lineTo(12,0);
				point.graphics.lineTo(6,0);
				pointBox.rawChildren.addChild(point);
				meanText.x = 0;
				meanText.y = 0;
				pointBox.addChild(meanText);
				meanBox.setStyle('horizontalAlign','right');
				meanBox.addChild(pointBox);
				meanBox.visible = false;
				//meanBox.setStyle('showEffect',fadeIn);
				//meanBox.includeInLayout = false;
				sliderVBox.addChild(meanBox);
				
				var hBox:HBox = new HBox();
				hBox.percentWidth = 100;
				
				var lhBox:HBox = new HBox();
				lhBox.percentWidth = 50;
				var rhBox:HBox = new HBox();
				rhBox.percentWidth = 50;
				rhBox.setStyle('horizontalAlign', 'right');
				
				lhBox.addChild(leftText);
				rhBox.addChild(rightText);
				hBox.addChild(lhBox);
				hBox.addChild(rhBox);
				sliderVBox.addChild(hBox);
				
				return sliderVBox;
			}
			
			public function sliderChange(event:SliderEvent):void {
				
				if(event.clickTarget == SliderEventClickTarget.TRACK)
				{
					sliderRelease(event);
					return;
				}
				
				var targetSlider:Slider = Slider(event.target);
				var targetSliderValue:Number = targetSlider.value;
				var targetSliderStatementId:int = int(targetSlider.name);
				this.parentApplication.ratingModule.sliders[targetSliderStatementId - 1].value = targetSliderValue;				
			}
			
			public function sliderValueChange(event:FlexEvent):void {
				
			}
			
			public function showMeanBox(stateid:int):void {
				meanBoxes[stateid].visible = true;
				meanBoxes[stateid].includeInLayout = true;
			}
			
			public function sliderRelease(event:SliderEvent):void {
				var targetSlider:Slider = Slider(event.target);
				var targetSliderValue:Number = targetSlider.value;
				var targetSliderStatementId:int = int(targetSlider.name);
				showMeanBox(targetSliderStatementId);		
				
				this.parentApplication.ratingModule.sliders[targetSliderStatementId - 1].value = targetSliderValue;
				
				// Log the rating change
				////this.parentApplication.log.logRatingChange(this.parentApplication.opinionSpaceId, targetSliderStatementId, targetSliderValue);
				
				// Note if the slider has been moved
				this.parentApplication.opinionMap.mapOverlay.statementsPage.slidersMoved = true;
				
				// If logged in, save the rating change
				if (this.parentApplication.isUserAuthenticated) {
					this.parentApplication.ratingModule.sendRating(targetSliderStatementId, targetSliderValue);
				}
				else
				{
					this.parentApplication.opinionMap.firstTimeStatements[targetSliderStatementId] = targetSliderValue;
					///this.parentApplication.opinionMap.placeUserDot(ConversionUtils.sliderToUserRating(sliders), this.parentApplication.opinionMap.curUserDot);
				}
			}
            
            /* TODO: Need to make a change somewhere around here to not initialize the sliders
            as the middle, but to put the user's previous ratings.
            Note, we don't need to change anything about when a rating slider has been moved.
            That sends the rating through the HTTP service in Rating Module.
            */
			private function init():void {		
				var statements:Array = this.parentApplication.ratingModule.statements;
				var statementPKs:Array = this.parentApplication.ratingModule.statementPKs;
				//TODO FIX
				for (var i:int = 0; i < Math.min(statements.length,Configuration.SLIDER_SUBSET); i++) {
					var statementNum:int = i + 1;
					var statementId:int = statementPKs[i];
					var statementText:String = statements[i];
					if(statementText == "")
						continue;
					//Alert.show(statements.length + "");
					
					var statementDisplayText:Label = createStatementDisplayText(statementNum, statementText,statements.length);
					//var slider:LargeOpinionSlider = this.parentApplication.ratingModule.createLargeSlider("statementsPageSlider", sliders, sliderValueChange, sliderChange, sliderRelease, statementId, -1);
					var slider:OpinionSlider = this.parentApplication.ratingModule.createSlider("ratingModuleSlider", sliders, sliderValueChange, sliderChange, sliderRelease, statementId, Constants.DEFAULT_SLIDER_VALUE);
					slider.percentWidth = 100;
					slider.value = this.parentApplication.ratingModule.sliders[i].value;
					var sliderVBox:VBox = createSliderBox(slider,statementId,this.parentApplication.ratingModule.statementMeans[i]);
					//sliderVBox.percentHeight=100;
					
					var spacer:VBox = createHorizontalSeparator();
					
					var tmpBox:VBox = new VBox();
					tmpBox.addChildAt(statementDisplayText,0);
					tmpBox.setStyle("verticalGap",0);
					tmpBox.addChildAt(sliderVBox,1);
					/*var link:LinkButton = createResearchLink(statementText);
					
					if(link != null)
					{
						tmpBox.addChildAt(link,1);
						tmpBox.addChildAt(spacer,3);
					}
					else
					{
						tmpBox.addChildAt(spacer,2);
					}*/
					tmpBox.addChildAt(spacer,2);
					tmpBox.percentWidth = 100;
					tmpBox.percentHeight = 100;
					
					sliderBox.addChildAt(tmpBox, i);
					//sliderBox.addChildAt(sliderHBox, 2*i + 1);
					sliderBoxes.push(tmpBox);
				}
								
				this.parentApplication.statementsPageInitialized = true;
				
				commentPageInit();
				showSliderPage(currentPage);
			}
			
			public function createResearchLink(statement:String):LinkButton{
				
				if(statement.indexOf('Google Docs') >= 0)
				{
					var link:LinkButton = new LinkButton();
					link.name = 'Google Docs';
					link.label = "Learn more about Google Docs";
					link.styleName = "researchLink";
					link.addEventListener(MouseEvent.CLICK, handleResearchClick);
					return link;
				}
				else if(statement.indexOf('Khan Academy') >= 0)
				{
					var link:LinkButton = new LinkButton();
					link.name = 'Khan Academy';
					link.label = "Learn more about Khan Academy";
					link.styleName = "researchLink";
					link.addEventListener(MouseEvent.CLICK, handleResearchClick);
					return link;
				}
				else if(statement.indexOf('Words with Friends') >= 0)
				{
					var link:LinkButton = new LinkButton();
					link.name = 'Words with Friends';
					link.label = "Learn more about Words with Friends";
					link.styleName = "researchLink";
					link.addEventListener(MouseEvent.CLICK, handleResearchClick);
					return link;
				}
				else if(statement.indexOf('Twitter') >= 0)
				{
					var link:LinkButton = new LinkButton();
					link.name = 'Twitter';
					link.label = "Learn more about Twitter";
					link.styleName = "researchLink";
					link.addEventListener(MouseEvent.CLICK, handleResearchClick);
					return link;
				}
				return null;
				
			}
			
			private function handleResearchClick(event:Event):void
			{
				var url:String = event.target.name;
				url = 'http://en.wikipedia.org/wiki/' + url.split( ' ' ).join( '_');
				this.parentApplication.httpUtils.openLinkNewWindow(url);
			}
			
			public function commentPageInit():void{
				
				//this.parentApplication.ratingModule.modifyStatementDisplayText("statementsPageStatement", false, -1, 100, -1, discussionStatementDisplayText, 6, this.parentApplication.discussionStatementDecoded);
				
				// If the user has a comment, set it in the comment box
				// in case the user has no ratings				
				if (this.parentApplication.userCommentDecoded.length > 0) {
					commentInput.text = this.parentApplication.userCommentDecoded[0];
				}
				//this.discussionStatementDisplayText.text = this.parentApplication.discussionStatementDecoded;
			}
			
			public function setViewToStatements():void
			{
				statementsBox.visible= true;
				statementsBox.includeInLayout = true;
				commentBox.visible = false;
				commentBox.includeInLayout = false;
				
			}
			
			public function setViewToComments():void
			{
				statementsBox.visible= false;
				statementsBox.includeInLayout = false;
				commentBox.visible = true;
				commentBox.includeInLayout = true;
				focusManager.setFocus(commentInput);
			}
			
			public function saveCommentsPage():void{				
				this.parentApplication.ratingModule.commentInput.text = this.commentInput.text;
				
				if(Configuration.COMMENT_TITLES)
					this.parentApplication.ratingModule.edittitle.text = edittitle.text;
				
				this.parentApplication.ratingModule.sendComment();
				this.parentApplication.ratingModule.disableEditCommentMode()
				this.parentApplication.opinionMap.hasFinishedComment = true;
				
				// Hide prompts if shown				
				this.parentApplication.opinionMap.firstTimeIntroPrompt.visible = false;
				this.parentApplication.opinionMap.firstTimeIntroPrompt.includeInLayout = false;
				
			}
			
			public function saveCommentsPageWrapper():void{
				if(this.parentApplication.ratingModule.commentInput.text < 50)
				{
					Alert.show("Please enter a response of at least 50 characters");	
				}
				else
				{
					saveCommentsPage();
				}
			}
		
           	 //We don't allow the user to proceed without entering a comment.
           	 //This displays an error message
           	 // 
           	private function displayResponseErrorMsg():void {
           		DisplayUtils.displayPopup(this.parentApplication, 'needResponse');
           	}
           	
           	public function resetCommentText():void
           	{
           		if(commentInput != null)
					commentInput.text = Configuration.COMMENT_ENTRY_PROMPT;
           	}
           	
           	public function resetSliders():void
           	{
           		for (var i:int = 0; i < sliders.length; i++) {
					
					if(sliders[i] == null)
						continue;
					
					sliders[i].value = Constants.DEFAULT_SLIDER_VALUE;
					this.parentApplication.opinionMap.firstTimeStatements = new Object();
					currentPage = 0;
					showSliderPage(currentPage);
				}
           	}
			
			public function nextPage():void
			{
				if(currentPage < this.parentApplication.numStatements/NUM_SLIDERS_PER_PAGE -1)
					currentPage++;
				showSliderPage(currentPage);
			}
			
			public function prevPage():void
			{
				if(currentPage > 0)
					currentPage--;
				showSliderPage(currentPage);
			}
			
			private function createHorizontalSeparator():VBox
			{
				var outer:VBox = new VBox();
				var inner:VBox = new VBox();
				
				inner.styleName = "mapLeftPanelHorizontalBoxLine";
				inner.percentWidth = 100;
				inner.height = 1;
				
				outer.percentWidth = 100;
				outer.setStyle('horizontalAlign', 'center');
				outer.addChild(inner);
				return outer;
			}
			
			private function remove_new_line(e:Event):void
			{
				commentInput.text = commentInput.text.replace("\r", "");
				commentInput.text = commentInput.text.replace("\n", " ");
				
				charCountLive = charCountLive + 1;
				//if(charCountLive % 30 == 0)
					//saveCommentsPage();
			}
		]]>
	</mx:Script>
	
	<mx:VBox id="statementsBox" width="100%" styleName="blueBorder">
		<!--<mx:HBox width="100%" visible="{this.parentApplication.numStatements > 5}" includeInLayout="{this.parentApplication.numStatements > 5}">
			<utils:LoggedButton label="Prev" styleName="yellowButton" click="prevPage()"/>
			<utils:LoggedButton label="Next" styleName="yellowButton" click="nextPage()"/>
		</mx:HBox>-->
		<mx:Text text="How much do you agree?" styleName="statementsPageStatement" width="100%" fontSize="16"/>
		<mx:VBox styleName="mapLeftPanelHorizontalBoxLine" width="100%" height="1"/>	
		<mx:VBox width="100%" horizontalAlign="center" >
			<mx:VBox id="sliderBox" width="98%"/>					
		</mx:VBox>
	</mx:VBox>

	<mx:VBox id="commentBox" horizontalAlign="center" width="100%" height="{this.parentApplication.opinionMap.plotCanvas.height - 180}">
		<mx:Text text="{'Topic:' + this.parentApplication.discussionStatementDecoded + '\n'}"  fontSize="18" fontWeight="bold" width="100%" color="#646462" />
		<mx:HBox width="100%" visible="{Configuration.COMMENT_TITLES}" includeInLayout="{Configuration.COMMENT_TITLES}">
			<mx:TextInput id="edittitle" text="Title" styleName="ratingModuleCommentInputText"  fontSize="19" fontWeight="bold" width="250" maxChars="25"/>
		</mx:HBox>
		
		
		<mx:TextArea change="remove_new_line(event)" id="commentInput" height="100%" text="{Configuration.COMMENT_ENTRY_PROMPT}" styleName="ratingModuleCommentInputText" width="100%" maxChars="{Configuration.MAX_COMMENT_LENGTH}"/>
		<mx:HBox width="100%" horizontalAlign="right" fontWeight="bold" color="0x646462">
			<mx:Text text="{commentInput.text.length + '/'+Configuration.MAX_COMMENT_LENGTH+' CHARS'}"/>
		</mx:HBox>
	</mx:VBox>
	
</mx:Module>
