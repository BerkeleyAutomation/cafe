<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:registration="com.opinion.components.registration.*"
				xmlns:core="com.opinion.components.core.*"
				xmlns:url="http://www.allurent.com/2006/urlkit"
				xmlns:utils="com.opinion.utils.*" 	
				layout="absolute"
				xmlns:pages="com.opinion.components.pages.*"
			  	currentState="home"
			  	verticalScrollPolicy="auto"
			  	horizontalScrollPolicy="auto"
			  	resize="applicationResize()"
			  	addedToStage="initMouseWheel()"
			  	preloader="com.opinion.components.preloader.CustomPreloader"
			 	applicationComplete="applicationComplete(event)"
			 	preinitialize="extractFlashVars()" 
			 	xmlns:reflector="com.rictus.reflector.*">
	<url:FlexBrowserManagerAdapter applicationState="{mainUrls}"/>
    
    <url:UrlRuleSet id="mainUrls" type="one">
    	<url:UrlRuleSet id="resetRuleSet" urlPattern="/reset.*">
    		<url:UrlValueRule urlFormat="/*" sourceValue="currentState"/>
    		<url:UrlValueRule urlFormat=";key=*" sourceValue="resetPasswordKey" defaultValue=""/>
        </url:UrlRuleSet>
		<url:UrlRuleSet id="activateRuleSet" urlPattern="/activate.*">
    		<url:UrlValueRule urlFormat="/*" sourceValue="currentState"/>
    		<url:UrlValueRule urlFormat=";key=*" sourceValue="activationKey" defaultValue=""/>
        </url:UrlRuleSet>
        <url:UrlRuleSet id="changePasswordRuleSet" urlPattern="/changepassword">
    		<url:UrlValueRule urlFormat="/*" sourceValue="currentState"/>
        </url:UrlRuleSet>
    </url:UrlRuleSet>
        
    <mx:states>
		<mx:State name="welcome" enterState="initState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
        			<pages:WelcomePage id="welcomePage" height="100%" width="100%"/>
        	</mx:AddChild>
        </mx:State>
        <mx:State name="home" enterState="initState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
				<mx:VBox id="opinionMapVBox" height="100%" width="100%" visible="false">
					<core:OpinionMap id="opinionMap" height="100%" width="100%"/>
				</mx:VBox>
        	</mx:AddChild>
        	<mx:AddChild relativeTo="{opinionMap.commentModuleWrapper}" position="lastChild">
        		<core:CommentModule id="commentModule" height="100%" width="100%"/>
        	</mx:AddChild>
       		<mx:AddChild relativeTo="{opinionMap.leftPanelUserViewer}" position="lastChild">
        		<core:RatingModule id="ratingModule" height="100%" width="100%"/>
        	</mx:AddChild>     	
        </mx:State>
        <mx:State name="signup" enterState="initState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
        		<pages:SignupPage id="signupPage" width="100%" height="100%"/>
        	</mx:AddChild>
        </mx:State>        
        <mx:State name="about" enterState="initState()" exitState="exitState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
        		<pages:AboutPage id="aboutPage" width="100%" height="100%"/>
        	</mx:AddChild>
        </mx:State>
		<mx:State name="privacy" enterState="initState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
        		<pages:PrivacyPage width="100%" height="100%"/>
        	</mx:AddChild>
        </mx:State>
        <mx:State name="loggedOut" enterState="initState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
        		<pages:LoggedOutPage width="100%" height="100%"/>
        	</mx:AddChild>
        </mx:State>
        <mx:State name="suggest" enterState="initState()">
        	<mx:AddChild relativeTo="{page}" position="lastChild">
        		<pages:SuggestionsPage width="100%" height="100%"/>
        	</mx:AddChild>
        </mx:State>
        <mx:State name="reset" basedOn="home" enterState="initState()"/>
        <mx:State name="activate" basedOn="home" enterState="initState()"/> 
		<mx:State name="changepassword" basedOn="home" enterState="initState()"/> 
        <mx:State name="fullScreen" basedOn="home" enterState="initState()">
            <mx:RemoveChild target="{opinionMap}"/>
            <mx:RemoveChild target="{commentModule}"/>
            <mx:RemoveChild target="{ratingModule}"/>
            <mx:AddChild position="lastChild" target="{opinionMap}" relativeTo="{fullTopOverlay}"/>
            <mx:AddChild position="lastChild" target="{commentModule}" relativeTo="{fullTopOverlay}"/>
            <mx:AddChild position="lastChild" target="{ratingModule}" relativeTo="{fullTopOverlay}"/>
        </mx:State>
    </mx:states>
    
    <mx:Style source="style/opinionflex.css"/>
    
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.opinion.components.core.OpinionMap;
			import com.opinion.components.core.Popup;
			import com.opinion.components.core.RatingModule;
			import com.opinion.settings.*;
			import com.opinion.utils.AuthenticationUtils;
			import com.opinion.utils.ConversionUtils;
			import com.opinion.utils.DisplayUtils;
			import com.opinion.utils.HTTPUtils;
			import com.opinion.utils.Log;
			import com.opinion.utils.MathUtils;
			import com.opinion.utils.PointDraw;
			
			import flash.display.StageDisplayState;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			
			//import org.hasseg.externalMouseWheel.ExternalMouseWheelSupport;
			
			// Variables
//			private var _mwSupport:ExternalMouseWheelSupport = null;

			// Variable to indicate the initial load 
			public var creating:Boolean;
			
			// Variables for a system refresh
            public var refreshing:Boolean = false;
            public var refreshFromLogin:Boolean = false;
            public var refreshFromLogout:Boolean = false;
            public var refreshAndBang:Boolean = false;
            public var bangOn:Boolean = Configuration.BANG_ON; // set this to false to eliminate the big bang effect
            
            // State variables associated with the discussion statements and the user's comment/ratings
            public var osNameDecoded:String = "";
			public var statementsDecoded:Array = null;
			public var discussionStatementsArray:Array = null;
			[Bindable] public var discussionStatementDecoded:String = "";
			[Bindable] public var discussionStatementShortDecoded:String = "";
			public var userRatingsDecoded:Array = null;
			public var eigenvectorsDecoded:Array = null;
			public var userCommentDecoded:Array = null;
			public var userCommentRevisions:Array = null;
			public var userSettingsDecoded:Object = null;
			public var userCommentScoreDecoded:Array = null;
			public var userCommentNormalizedScoreDecoded:Array = null;
			public var userAgreementBuckets:Array = null;
			public var userInsightBuckets:Array = null;
			public var otherAgreementBuckets:Array = null;
			public var otherInsightBuckets:Array = null;
			[Bindable] public var isUserAuthenticated:Boolean = false;
			[Bindable] public var numStatements:int = 0;
			
			// User specific variables
			[Bindable] public var userCommentScore:Number = 0;
			[Bindable] public var userCommentNormalizedScore:Number = 0;
			[Bindable] public var userRaterScore:Number = 0;
			[Bindable] public var userSuggesterScore:Number = 0;
            [Bindable] public var registeredUsername:String = null;
            [Bindable] public var curUserId:int = 0;
			[Bindable] public var notificationDictArray:Array;
			[Bindable] public var numUserRatings:int = 0;
			[Bindable] public var numUserRatedBy:int = 0;
			public var lastNotification:Number = 0;
			[Bindable] public var numUserRatedByWithComments:int = 0;
            [Bindable] public var userLocation:String = "";
			[Bindable] public var userPictureURL:Object = null;
			[Bindable] public var userData:Object = null;
            public var registeredPassword:String = null;
            public var registeredEmail:String = null; 
            public var justLoggedInUsername:String = ""; // used to so a user can tweet after they've logged out
            
            public var argumentUsername:String = "";
            public var httpUtils:HTTPUtils;
            public var log:Log;
            
            // For now, we hardcode the OS ID - you can change this to allow multiple OS instances if needed
            [Bindable] public var opinionSpaceId:int = Configuration.OPINION_SPACE_ID;
            
            [Bindable] private var stageHeight:int;
            
            // This is the global popup window that is used for registration, login, etc.
            [Bindable] public var popup:Popup = null;
            
			[Bindable] public var resetPasswordKey:String = "";
            [Bindable] public var activationKey:String = "";
            
            [Bindable] public var numUsersTotal:int = 0;
            [Bindable] public var ideasTotal:int = 0;
            
            public var statementsPageInitialized:Boolean = false;
                       
            public static const SHOW_RATING_PANEL_TIMEOUT:int = 300;
            
            /* Variables pull directly from the Configuration File
			*/
			public var ENTRY_CODE:String = "";
			
		//	private var openID:OpenIDAuthentication;
 			
 			public var adminpanelUids:Array;
 			
 			public var PointDrawer:PointDraw;
			public var signupPageCallback:Function;
			public var loginFormCallback:Function;
			[Bindable] public var usernameSearch:Boolean = false;
			[Bindable] public var notificationsList:ArrayCollection;
			[Bindable] public var numNewComments:int = 0; 
			[Bindable] public var numRatedUpdatedComments:int = 0; 
			[Bindable] public var numSuggestions:int = 0; 
			public var argumentUsernameSaved:String = "";
			public var configDict:Object = null;
			[Bindable] private var registrationNetworkError:String = "";
			[Bindable] public var commentRank:int = 0;
			[Bindable] public var commentRankTotal:int = 0;
			public var serverDate:Object = null;
			public var currentCommentId:int = -1;
			
			private function replaceAll( source:String, find:String, replacement:String ) : String
			{
				return source.split( find ).join( replacement );
			}
			
 			/**
 			 * Extracts all the flash variables and instantiates the application variables
 			 * before any other modules load (on preinitialization)
 			 */ 
 			private function extractFlashVars():void {			
				if(Application.application.parameters.clientSettings != null)
				{
					configDict = JSON.decode(Application.application.parameters.clientSettings);
					for(var key:String in configDict)
					{
						if(configDict[key] == 'false')
							Configuration[key] = false;
						else
						{
							var value:String = configDict[key];
							value = replaceAll(value,"\r\n","<br/>");
							Configuration[key] = value;
						}
					}
				}
				
				// Switch to vertical orientation if needed
				if(Application.application.width < 550)
				{
					Configuration.VERTICAL_ORIENTATION = true;
					Configuration.MIN_WIDTH = 510;
				}
				
				// Allow users to see the username in the URL
				if (Application.application.parameters.username != null)
				{
					//argumentUsername = Application.application.parameters.username;
					if(Configuration.USE_ENTRY_CODES)
						ENTRY_CODE = Application.application.parameters.username;
					else if (Configuration.SOFT_ENTRY_CODES)
						ENTRY_CODE = Application.application.parameters.username;
					else
						argumentUsername = Application.application.parameters.username;
					
					if (argumentUsername != "" && argumentUsername != "~NULL")
					{
						usernameSearch = true;
					}
					
					
				}
				
				// Get the url root for the system
				if (Application.application.parameters.urlRoot != null) {
					httpUtils = new HTTPUtils(Application.application.parameters.urlRoot + "/");
					log = new Log(Application.application.parameters.urlRoot + "/");
				}
				else {
					httpUtils = new HTTPUtils("/"); // Just in case, although this assumes the Django instance is hosted at the root
					log = new Log("/");
				}
				
				this.createOS.url = this.httpUtils.getServiceUrl('os/show/' + opinionSpaceId + '/');
				this.refreshOS.url = this.httpUtils.getServiceUrl('os/show/' + opinionSpaceId + '/');
				refreshOS._failure_function = refreshFailed;
				refreshOS._retry_function = sendRefreshOS;
				this.getUserCommentScore.url = this.httpUtils.getServiceUrl('os/show/' + opinionSpaceId + '/');
				this.getStats.url = this.httpUtils.getServiceUrl('os/stats/' + opinionSpaceId + '/');
				this.getNotifications.url = this.httpUtils.getServiceUrl('os/notifications/' + opinionSpaceId + '/');
				this.sendEntryCode.url = this.httpUtils.getServiceUrl('accountsjson/entrycode/get/');
				
				// TEMP DEBUG LOGGING
				if (Configuration.DEBUG_LOGGING)
					log.logUserEvent(1, -1, "extractFlashVars called");
 			}	
			
			private function refreshFailed():void
			{
				endRefresh();
				opinionMap.mapOverlay.clearState();
				networkError.visible = true;
				networkError.includeInLayout = true;
				
				if(refreshOS.backOffTimer > 32)
				{
					networkError.visible = true;
					networkError.includeInLayout = true;
					registrationNetworkError = "Maximum retries exceeded";
					return;
				}
				
				for(var i:int = 0; i<refreshOS.backOffTimer; i++)
					setTimeout(displayCountDown,i*1000,refreshOS.backOffTimer - i);
				setTimeout(displayLoading,refreshOS.backOffTimer*1000);
			}
			
			private function displayCountDown(left:int):void
			{
				registrationNetworkError = "Network error retrying in: " + left + "s";
			}
			
			private function displayLoading():void
			{
				registrationNetworkError = "Attempting to reconnect...";
			}
 			
			/**
			 * Runs initialization methods after the application loads.
			 */ 
			private function applicationComplete(event:Event):void {
				Application.application.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				// TODO: Fix these lines to properly support scrolling in OS X
				// _mwSupport = ExternalMouseWheelSupport.getInstance(stage);
				// _mwSupport.dispatchingObjectDeterminationMethod = ExternalMouseWheelSupport.COPY_MOUSEMOVE_EVENTS; */
				
				//this.log.log(Log.INFO, -1, "APP_LOADED");
				
				// Set to either horizontal (standard) or vertical (facebook) layout
				initLayout();
				
				sendCreateOS();
				
				//poll for fresh stats at the specified time interval
				if (Configuration.POLLING_ENABLED)
				{
					setInterval(refreshNotifications,Configuration.POLLING_FREQUENCY);
				}
				
				var params:String = ExternalInterface.call("window.location.search.substring");
				params = unescape(params);
				
				//Alert.show(oid.generateSharedKey());
				// Get the height of the stage once the application is loaded
				stageHeight = Math.max(stage.height, Application.application.height);
				
				// register os_id in DOM for logging purposes
				ExternalInterface.call("set_OS_ID", this.opinionSpaceId);
				
				// Create Point Drawer
				PointDrawer = new PointDraw();
				
				ExternalInterface.addCallback("sendToActionScript", receivedFromJavaScript);//hook to allow auto logins for facebook and twitter
			}

			private function receivedFromJavaScript():void {
				
				if(signupPageCallback != null)
					signupPageCallback();
				
				if(loginFormCallback != null)
					loginFormCallback();
			}			
			private function handleFaultOrTimeout(event:FaultEvent):void{
				
				if(loadingScreen.visible) //opinionflex specific handling
				{
					loadingScreen.visible = false;
					loadingScreen.includeInLayout = false;
				}	
			}
			
            private function initMouseWheel():void {
//                MouseWheelEnabler.init(stage);
            }
			
			/**
			 * Function that removes an intent to save - currently not needed
			 */ 
			public function clearSaveMemory():void {
			}
			
			public function OSTweet(username:String = null):void {
				if (username == null) username = registeredUsername;
				
				httpUtils.openLinkNewWindow('http://twitter.com/home/?status=I+earned+'+score2string()+'+points+in+the+Collective+Discovery+Engine!+Read+my+idea+at:+'+this.httpUtils.getServiceUrl(username)+ '+%23opinionspace');
			}
			
			public function FBPost(username:String = null):void{
				if (username == null) username = registeredUsername;
				httpUtils.openLinkNewWindow("http://www.facebook.com/sharer.php?u="+this.httpUtils.getServiceUrl(username));

			}
			
			public function score2string():String
			{
				return opinionMap.scoreFormatter.format((userCommentScore+opinionMap.numFullyRatedResponses)*Configuration.SCORE_SCALE_FACTOR);
			}
			
			/**
			 * Handler for any resize in the application
			 */ 
			private function applicationResize():void {
				try {
					stageHeight = Math.max(stage.height, Application.application.height);
				}
				catch (e:Error) {}
				
				/*
				if (opinionMap != null)
					opinionMap.refreshArcs();
				*/
					
				if (welcomePage != null)
					welcomePage.redrawPoints();
			}
			
			/**
			 * Hanlder if the user switches to fullscreen
			 */ 
			private function fullScreenHandler(event:FullScreenEvent):void {
				if (event.fullScreen) {
					fullTopOverlay.percentHeight = 100;
					currentState = 'fullScreen';
					opinionMap.showFullscreenWarningBriefly();
                } else {
                	fullTopOverlay.height = stageHeight;
                    currentState = 'home';
                    opinionMap.hideFullscreenWarning();
                }
   			}
   			
   			/**
   			 * Switches the application in and out of fullscreen
   			 */ 
			public function toggleFullScreen():void {
                try {
                    switch (Application.application.stage.displayState) {
                        case StageDisplayState.FULL_SCREEN:
                            /* If already in full screen mode, switch to normal mode. */
                            Application.application.stage.displayState = StageDisplayState.NORMAL;
                            break;
                        default:
                            /* If not in full screen mode, switch to full screen mode. */
                            Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
                            break;
                    }
                } catch (err:SecurityError) {
                    // Ignore this error
                }
            }
			
			private function exitState():void {
				switch(currentState) {
					case 'about':
						aboutPage.hideAll();
						break;
					case 'welcome' :
						if(Configuration.UNILEVER_WELCOME_PAGE)
							appCanvas.minHeight = Configuration.MIN_HEIGHT;
						break;
				}
			}
			
			/**
			 * Depending on the current state, displays an appropriate popup.
			 */
			private function initState():void {
				switch (currentState) {
					case 'about':
						aboutPage.init();
						break;
					case 'home':
						break;
					case 'signup':
						break;
					case 'reset':
	    				DisplayUtils.displayPopup(this, 'resetFormKey');
	    				break;
	    			case 'activate':
	    				DisplayUtils.displayPopup(this, 'activateForm');
	    				break;
	    			case 'changepassword':
	    				DisplayUtils.displayPopup(this, 'changePasswordForm');
	    				break;
	    			case 'welcome':
						if(Configuration.UNILEVER_WELCOME_PAGE)
							appCanvas.minHeight = 700;
	    				removeOpinionMap();
						break;
				} 
				
				if (currentState == 'home') {
					osNameText.visible = true;
				}
				else {
					osNameText.visible = false;
				}
			}		
        
        	/**
			 * Perform necessary state changes and refreshes for logout
			 */
        	public function logout():void {
        		// Log that we are logged out
				//this.log.log(Log.INFO, -1, "LOGGED_OUT");
        		
				//this.opinionMap.join_box.visible=true;
				//this.opinionMap.join_box.includeInLayout=true;
        		// Indicate this is a refresh from logging out
        		refreshFromLogout = true;
        		
        		// Reset the getOtherUsers and refreshOS urls to their original values in case they were changed
        		// from changing the discussion statement
        		// URL for sendComment is handled within the request in RatingModule.mxml
        		
        		opinionMap.getNeverSeenComments.url = this.httpUtils.getServiceUrl('os/neverseencomments/' + this.opinionSpaceId+ '/');
        		//opinionMap.getOtherUsers.url = this.httpUtils.getServiceUrl('os/otherusers/' + this.opinionSpaceId+ '/');
            	refreshOS.url = this.httpUtils.getServiceUrl('os/show/' + opinionSpaceId + '/');
            	opinionMap.selectedDiscussionStatementId = -1;
        		
        		// Refresh the OS to load the *default* saved ratings and dot location
        		sendRefreshOS();
        		
        		// Change the menu to reflect that the user is logged in
				opinionMenu.currentState = 'loggedOut';
			//	ratingModule.commentSuggestion.currentState = 'loggedOut';
				isUserAuthenticated = false;
				justLoggedInUsername = registeredUsername;
				
				this.addEventListener("refreshOSDone", logoutContinue);
				opinionMap.currentTopicBox.visible = false;
				opinionMap.currentTopicBox.includeInLayout = false;
			}
			
			/**
			 * Cleans up the logout
			 */ 
			public function logoutContinue(e:Event):void {
				clearStateVariables();
				refreshFromLogout = false;
				this.removeEventListener("refreshOSDone", logoutContinue);
			}
			
			/**
			 * Once a user logs out (and refreshes, which affects these variables), these state variables
			 * need to be reset so that if they log back in, they'll see what a new user normally sees
			 */
			public function clearStateVariables():void {
				registeredUsername = null;
           		registeredPassword = null;
           		userLocation = "";
           		curUserId = 0;
           		ratingModule.initialStatementsRated = new Dictionary();
           		ratingModule.initialCommentEdited = false;
           		
           		// Clear the scores
				userCommentScore = 0;
				userCommentNormalizedScore = 0;
				userRaterScore = 0;
				
				// Clear some demo vars
				opinionMap.opinionSpaceDemoEnd();
			}
			
			/**
			 * Resets the sliders and refreshses the discussion question and response.
			 */ 
			private function refreshStatementsPage():void {
				if (statementsPageInitialized) {
					opinionMap.mapOverlay.resetStatementsPageSliders();					
					opinionMap.mapOverlay.resetStatementsPageCommentText();
					
					// refresh the discussion statement for multiple discussion question support
					//opinionMap.statementsPage.discussionStatementDisplayText.text = this.discussionStatementDecoded;
					opinionMap.mapOverlay.setDiscussionStatementDisplayText(this.discussionStatementDecoded);
				}
			}
			
			/**
			 * Iterates over the argument array of discussion questions to load either the
			 * current discussion question (from createOS)  or the one selected by the user
			 * from (refreshOS). 
			 * 
			 * opinionMap.selectedDiscussionStatementId will equal -1 if the user has not yet
			 * selected a discussion question to view.
			 */ 
			private function storeCurrentDiscussionStatement(dstmts:Array):void {			
				for (var i:int = 0; i < dstmts.length; i++) {
					if (opinionMap.selectedDiscussionStatementId == -1) { // If the user has not selected a discussion question (mostly likely on creation)
						if (dstmts[i]['is_current'] == 1) {
							discussionStatementDecoded = dstmts[i]['statement'];
							discussionStatementShortDecoded = dstmts[i]['short'];
						}	
					} else {
						if (dstmts[i]['id'] == opinionMap.selectedDiscussionStatementId) { // If the user has selected a discussion question
							discussionStatementDecoded = dstmts[i]['statement'];
							discussionStatementShortDecoded = dstmts[i]['short'];							
						}
					}
					
				}
			}
			
			/**
			 * Used to set state varibales by both createOS and refreshOS
			 */ 
			public function storeOpinionSpaceVariables(decoded:Object):void {
				osNameDecoded = decoded["name"];
				statementsDecoded = decoded["statements"];
				
				discussionStatementsArray = decoded['discussion_statements'];
				storeCurrentDiscussionStatement(discussionStatementsArray);
				
				userRatingsDecoded = decoded["cur_user_ratings"];
				eigenvectorsDecoded = decoded["eigenvectors"];
				userCommentDecoded = decoded["cur_user_comment"];
				userCommentRevisions = decoded["prev_comments"];
				userSettingsDecoded = decoded["cur_user_settings"];
				isUserAuthenticated = decoded["is_user_authenticated"];
				numUsersTotal = decoded["num_users_total"];
				ideasTotal = decoded["total_ideas"];
				userAgreementBuckets = decoded["user_agreement_buckets"];
				userInsightBuckets = decoded["user_insight_buckets"];
				otherAgreementBuckets = decoded["other_agreement_buckets"];
				otherInsightBuckets = decoded["other_insight_buckets"];
				numStatements = statementsDecoded.length;
				userCommentScoreDecoded = decoded["cur_user_comment_score"];
				userCommentNormalizedScoreDecoded = decoded['cur_user_normalized_score'];
				userSuggesterScore = decoded["cur_user_suggester_score"];
				registeredUsername = decoded['cur_username'];
				userLocation = decoded['cur_user_location'];
				userPictureURL = decoded['user_data'];
				userData = decoded['user_data'];
				curUserId = decoded['cur_user_id'];	
				serverDate = decoded['date'];
				currentCommentId = decoded['cur_comment_id'];
				
				if (userSettingsDecoded['username_format'] != "" && userSettingsDecoded['username_format']!= null) 
					registeredUsername = userSettingsDecoded['username_format'];
					
				if (userCommentScoreDecoded.length > 0) userCommentScore = userCommentScoreDecoded[0][0];
				userRaterScore = decoded["cur_user_rater_score"];
				
				if (userCommentNormalizedScoreDecoded.length > 0) userCommentNormalizedScore = userCommentNormalizedScoreDecoded[0][0];
				
				// Set variables in OpinionMap
				opinionMap.userRegisteredUsernameText.text = registeredUsername;
				
				if (userLocation == "null" || userLocation == null || userLocation == "")
				{
					opinionMap.userLocationText.includeInLayout = false;
					opinionMap.userLocationText.visible = false;
				} else
				{
					opinionMap.userLocationText.text = "Location: " + userLocation;					
				}
				
				opinionMap.storeFilterableKeys(decoded['filterable_keys']);
				
				// Initialize the traffic lights UI
				if (Configuration.LENSES_ENBALED) 
					opinionMap.populateStatementsDropdown(statementsDecoded);
				
				// Additional questions
				if (Configuration.HAVE_ADDITIONAL_PROFILE_QUESTIONS) {
					opinionMap.hasFinishedAdditional = decoded['finished_additional_questions'];
				}
				
				opinionMap.numFullyRatedResponses = decoded['num_fully_rated'];
				
				// Lenses
				adminpanelUids = decoded['adminpanel_uids'];
				opinionMap.approvedForLenses = adminpanelUids.indexOf(curUserId) != -1;
				
				// Set the topic
				opinionMap.currentTopicText.text = discussionStatementShortDecoded;//discussionStatementDecoded;
				if (opinionMap.currentTopicText.text.length > 100)
					headerTopicText.setStyle('fontSize',16);
				
				// Size the flare vis
				opinionMap.resizeFlareVis(); 
			}
			
			/**
			 * Callback handler for the createOS HTTPService
			 * Creates the OpinionMap and RatingModule, and creates the user's dot, and
			 * also creates the other users' dots
			 */
			public function handleCreateOS():void {
				// Log that the createOS handler was called
				//this.log.log(Log.INFO, opinionSpaceId, "OS_CREATED");
				
				var decoded:Object = JSON.decode(createOS.lastResult.toString());
				
				// TEMP DEBUG LOGGING
				if (Configuration.DEBUG_LOGGING)
				{
					log.logUserEvent(1, -1, "handleCreateOS called");
					log.logUserEvent(1, -1, "hcs username: " + decoded['cur_username']);
					log.logUserEvent(1, -1, "hcs isUserAuthenticated: " + decoded['is_user_authenticated']);
				}
				
				createOS.disconnect(); //kill the connection after its use is over
				storeOpinionSpaceVariables(decoded);

				// If the user is authenticated, ensure that the OpinionMenu knows about that
				// We'll disable the loading screen at the end of the create
				if (isUserAuthenticated) {
					if(!Configuration.USE_ENTRY_CODES)
					{
						opinionMenu.currentState = 'loggedIn';
						
						if(!loadingScreen.visible)
							loadingScreen.visible = true;
						
						// TEMP: make map visible
						if(!Configuration.SPLASH_PAGE_RETURN)
							displayOpinionMap();
					}
					else
					{
						var params:Object = new Object();
						params['entrycode'] = this.ENTRY_CODE;
						sendEntryCode.send(params);
					}
				}
				else {
					if(Configuration.FORCE_LOGIN)
					{
						DisplayUtils.displayPopup(this, 'loginForm');
					}
					opinionMenu.currentState = 'loggedOut';
					currentState = 'welcome';
					//loadingScreen.visible = false;
				}
				
				// Create and initialize the OpinionMap
				opinionMap.initializeCommentModule();
				opinionMap.createOpinionMap(osNameDecoded,
											userCommentDecoded,
                                            eigenvectorsDecoded,
                                            numStatements,
                                            isUserAuthenticated,
                                            statementsDecoded); 
                                            // Added statementsDecoded to obtain the statement id numbers
                                            // when there was only one opinion space, these ids were hardcoded
                
				if (decoded['background_points'] != null && (decoded['background_points'] as Array).length != 0)
					opinionMap.drawBackgroundPoints(decoded['background_points']);
				
				// Flag for a big bang. We only have the big bang if the user is
				// authenticated. Otherwise, for sneak peek, we just display
				// the normal space.
				if (bangOn && isUserAuthenticated) refreshAndBang = true;
				
				
				// 2010.08.19 Moved here from endCreateOS to address a bug in state
				// changes that stopped animations
				/* For multiple OS: Make a change here to direct an authenticated user to a page
				to choose their opinion space or their dashboard 
				
				Change the state to a page of your choice */ 
				if (isUserAuthenticated)
				{
					// Note: Changed to only go to 'home'
					// Note: removed all state changes, stay in 'home', already done in the code above
					// so a little redundan
					if(Configuration.SPLASH_PAGE_RETURN)
					{
						currentState = 'welcome';
					}
					else
					{
						currentState = 'home';
					}
					
				}
				
                // Create the other users' dots.
                if (Configuration.LENSES_ENBALED && (adminpanelUids.indexOf(curUserId) != -1))
                {
                	// Show all dots if lenses enabled
                	opinionMap.getAllCurrentComments.url = this.httpUtils.getServiceUrl('os/all/' + this.opinionSpaceId+ '/');
                	opinionMap.getAllCurrentComments.send();
                } else
                {
                	// Normal operation
                	opinionMap.getNeverSeenComments.url = this.httpUtils.getServiceUrl('os/neverseencomments/' + this.opinionSpaceId+ '/');
	                opinionMap.drawingUsers = true;
	                
	                var parameters:Object = new Object();
	                
	                if (usernameSearch)
	                	parameters['username'] = argumentUsername;
	                
	                if (Configuration.USE_ENTRY_CODES)
	                	parameters['entrycode'] = ENTRY_CODE;
	                	
	                if (!isUserAuthenticated)
		            	parameters['no_statements'] = Configuration.NO_STATEMENTS;
	                	
	                opinionMap.getNeverSeenComments.send(parameters);
	                
	                // TEMP DEBUG LOGGING
	                if (Configuration.DEBUG_LOGGING)
						log.logUserEvent(1, -1, "getNeverSeenComments called - in handleCreateOS");
                }
                
                	
                opinionMap.initDiscussionStatementsList();
                
                // Create the landmarks
  //              opinionMap.getLandmarks.url = this.httpUtils.getServiceUrl('os/landmarks/' + this.opinionSpaceId + '/');
//                opinionMap.drawingLandmarks = true;
//                opinionMap.getLandmarks.send();
                
                // Create the RatingModule, load the statements, and
                // create the user's dot
                ratingModule.createRatingModule(opinionMap,
                                              statementsDecoded,
                                              discussionStatementShortDecoded, // set it as the short text
                                              userRatingsDecoded,
                                              userCommentDecoded,
                                              userCommentRevisions);
                
             	// Start the auto-refresh of the other users' dots
             	//opinionMap.autoRefresh();
   				// No auto refresh as of ticket #30
   				
   				// Start twinkling
   				opinionMap.turnOnTwinkle();
			}
			
			/**
			 * Called at the end of creating the system. If you are to change the overall logic of the space
			 * make a change where the currentState is set.
			 */ 
			public function endCreateOS():void {
				// Checks that handleGetOtherUsers and handleGetLandmarks have finished
				if (!opinionMap.drawingUsers) 
				{
					// Turn creating flag off
					creating = false;
					
					// Take the user to the space after the space has been created
					if (isUserAuthenticated) 
					{
						
						//Add profile pic
						if(userPictureURL != null)
						{
							var userPictureURLString:String = userPictureURL['picture'];
							if(userPictureURLString == null || userPictureURLString == "null" || userPictureURLString == "")
								opinionMap.profile_pic.source = Configuration.UNKNOWN_USER;
							else
								opinionMap.profile_pic.source = userPictureURLString;	
						}
						else
						{
							opinionMap.profile_pic.source = Configuration.UNKNOWN_USER;
						}
						
					    // Remove the loading screen before the big bang
					    loadingScreen.visible = false;
					    
					    // Re-place the user's dot (has to be before the big bang)
					    // this is needed because flareVis will not have it's final height and width set until later (now)
						opinionMap.refreshUserDot(ConversionUtils.sliderToUserRating(ratingModule.sliders), ratingModule.commentInput.text);
					    
						// Play big bang
						if (refreshAndBang) {
							// If the user has no stored ratings, they will go to the statements page
							// We delay the big bang till they're done with the statements page.
							if (currentState == 'home') playBigBang();
						} else {
							opinionMap.endRefreshNoAnimation();
						}
					} else 
					{
						// Remove loading screen
						loadingScreen.visible = false;
						
						// As no big bang is played for an unauthenticatd user, this call is appropriate
						opinionMap.endRefreshNoAnimation();
					}
				}			
			}
			
			/**
			 * Callback handler for the refreshOS HTTPService
			 * Refreshes the RatingModule and redraws the user's dot
			 */
			public function handleRefreshOS():void {
				// Log that the refreshOS handler was called
				//this.log.log(Log.INFO, opinionSpaceId, "OS_REFRESHED");
				
				var decoded:Object = JSON.decode(refreshOS.lastResult.toString());
				
				// TEMP DEBUG LOGGING
				if (Configuration.DEBUG_LOGGING)
				{
					log.logUserEvent(1, -1, "handleRefreshOS called");
					log.logUserEvent(1, -1, "hcs username: " + decoded['cur_username']);
					log.logUserEvent(1, -1, "hcs isUserAuthenticated: " + decoded['is_user_authenticated']);
				}
				
				refreshOS.disconnect(); //kill the connection after its use is over
				storeOpinionSpaceVariables(decoded);
				
				opinionMap.alignDiscussionStatementDropDownSelection();
				
				// If the user is authenticated, ensure that the OpinionMenu knows about that
				if (isUserAuthenticated) 
					opinionMenu.currentState = 'loggedIn';
				else 
					opinionMenu.currentState = 'loggedOut';
				
			   	ratingModule.refreshRatingModule(userRatingsDecoded, userCommentDecoded, discussionStatementShortDecoded, userCommentRevisions);
			   	refreshStatementsPage();
			   			   	
				// Refresh the map itself
				opinionMap.refreshOpinionMap(osNameDecoded, userCommentDecoded, eigenvectorsDecoded, numStatements, isUserAuthenticated, refreshAndBang, statementsDecoded);
               	
               	// Reset the big bang effect
              	if (refreshAndBang) opinionMap.resetBigBang();
               	
			   	// Places the user's dot based on the refreshed RatingModule sliders, comment, and comment score
               	opinionMap.refreshUserDot(ConversionUtils.sliderToUserRating(ratingModule.sliders), ratingModule.commentInput.text); 	
               	
               	// Refresh the comment panel
               	opinionMap.refreshCommentPanel();
               	
               	// 2010.08.19 Moved here from endRefreshOS to handle the state change earlier
               	// Change the state to a page of your choice
               	if (isUserAuthenticated)
               	{
               		// Note: Changed to only go to 'home'
               		currentState = 'home';
               	}
               	
               	
               	// Finally, call HTTPServices to refresh all the the other dots and landmarks
               	opinionMap.refreshOtherDots();
//               	opinionMap.refreshLandmarks();
               	if (!Configuration.VERTICAL_ORIENTATION)
					opinionMap.showRatingModule();
               	
               	// This event is dispatched for a logout
               	this.dispatchEvent(new Event("refreshOSDone"));
			}
			

			/**
			 * Performs the necessary state changes and refreshes for login
			 */
			public function login():void {
          		// Log that we are logged in
				//this.log.log(Log.INFO, -1, "LOGGED_IN");
			    // We are now successfully logged in
			    isUserAuthenticated = true;

				if(! opinionMap.userSignedUp)
				{
					opinionMap.currentTopicBox.visible = false;
					opinionMap.currentTopicBox.includeInLayout = false;
				}
				
				if(!Configuration.SPLASH_PAGE_RETURN)
				{
					// TEMP: make the map visible
					displayOpinionMap();
					
					this.opinionMap.clearJoinObjects();
					
					// Flag for a big bang
					if (bangOn) refreshAndBang = true;
				    
				    // Specify that this is a refresh for a login
				    refreshFromLogin = true;
				    
				    // TEMP DEBUG LOGGING
					if (Configuration.DEBUG_LOGGING)
						log.logUserEvent(1, -1, "opinionflex.login() called");
				    
					// Refresh the OS to load the user's saved ratings and dot location
					sendRefreshOS();
				}
				else{
					currentState = 'welcome';
				}
				
			}	
								
			public function sendCreateOS():void {
				creating = true;
				
				var parameters:Object = new Object();
				parameters['background_points'] = true;
				
				// nonce
				parameters['nonce'] = Math.random();
				
				createOS.send(parameters);
				
				// TEMP DEBUG LOGGING
				if (Configuration.DEBUG_LOGGING)
					log.logUserEvent(1, -1, "sendCreateOS called");
			}
			
			public function sendRefreshOS():void {
				// nonce
				var parameters:Object = new Object();
				parameters['nonce'] = Math.random();
				networkError.visible = false;
				networkError.includeInLayout = false;
				// Don't refresh if the map is currently refreshing unless it's a refresh from logout
				if (!refreshing) {
					startRefresh();
					refreshOS.send(parameters);
				} else if (refreshFromLogout) {
					// This second chance is in case we click logout before the
					// refresh is finished. We want to make sure a logout from
					// refresh goes through
					startRefresh();
					refreshOS.send(parameters);
				}
				
				// TEMP DEBUG LOGGING
				if (Configuration.DEBUG_LOGGING)
					log.logUserEvent(1, -1, "sendRefreshOS called");
			}
			
			/**
			 * Before the system refreshes, this function does some clean-up work on opinionMap
			 */ 
			public function startRefresh():void {
				refreshing = true;
				
				// Clear the selected dot (it gets cleared automatically in handleGetOtherUsers, but doing it here
				// makes things snappier)
				if (opinionMap.curSelectedSprite != null && opinionMap.curSelectedSprite != opinionMap.curUserDot) {
                	if(true) opinionMap.changeColor(opinionMap.curSelectedSprite, Configuration.OTHER_DOT_COLOR, Configuration.OTHER_DOT_ALPHA);
                	//else opinionMap.changeColor(opinionMap.curSelectedSprite, Configuration.LANDMARK_COLOR, Configuration.LANDMARK_ALPHA);
    			}
				opinionMap.curSelectedSprite = null;
				
				// Clear the highlight box if it exists and if this is a refresh from login or logout
				opinionMap.hideHighlightBox();
				
				if (!refreshFromLogout) {
					if (refreshFromLogin) loadingScreen.visible = true;
					else loadingScreen.visible = true; // changed to show "Loading..." screen instead of label: opinionMap.refreshingLabel.visible = true;
				} 
				
				// hide the meTxt if visible
				opinionMap.hideArrowBox();
				
				// hide the centerInstructions if visible
				opinionMap.hideCenterInstructions();
			}
			
			/**
			 * Called at the end of refreshing the system. Similar in structure to endCreateOS, but has
			 * important differences as it is ending a refresh.
			 */ 
			public function endRefresh():void {
				// Checks that handleGetOtherUsers and handleGetLandmarks have finished
				// (They each call this function, but we only want to execute it once, when they're *both* done)
				if (!opinionMap.refreshingOtherUsers) {
					refreshing = false;

					// Take the user to the space after the space has been created
					if (isUserAuthenticated) {

						//Add profile pic
						if(userPictureURL != null)
						{
							var userPictureURLString:String = userPictureURL['picture'];
							if(userPictureURLString == null || userPictureURLString == "null" || userPictureURLString == "")
								opinionMap.profile_pic.source = Configuration.UNKNOWN_USER;
							else
								opinionMap.profile_pic.source = userPictureURLString;	
						}
						else
						{
							opinionMap.profile_pic.source = Configuration.UNKNOWN_USER;
						}
						
						// Set the statements page comment text if the user has a response
						// The statements page was reset in the handler of refresh
						// Otherwise, the text will be set when the statements page is initialized
						if (userCommentDecoded.length > 0 && statementsPageInitialized) {
							//opinionMap.statementsPage.commentInput.text = userCommentDecoded[0];
							opinionMap.mapOverlay.setCommentInputText(userCommentDecoded[0]);
						}
												
					    if (refreshFromLogin) {
					    	loadingScreen.visible = false;
					    	refreshFromLogin = false;	
					    } else {
					    	//changed to show "Loading..." screen instead of label: opinionMap.refreshingLabel.visible = false;
					    	loadingScreen.visible = false; 
					    }
					    
					    // Unilever: Show the walkthrough, if this is the general question
					    /* 
					    if (Configuration.SPLASH_PAGE_RETURN && opinionMap.selectedDiscussionStatementId == -1)
					    	opinionMap.mapOverlay.showWalkthrough();
					    */
					    
						// Play big bang
						if (refreshAndBang) {
							// If the user has no stored ratings, they will go to the statements page
							// We delay the big bang till they're done with the statements page.
							if (currentState == 'home') playBigBang();
						} else {
							opinionMap.endRefreshNoAnimation();
						}
					}
					
					// This covers the case where the user is not logged in.
					// clicked sneek peak, and refreshed the system
//TODO:					if (opinionMap.refreshingLabel.visible) opinionMap.refreshingLabel.visible = false;

					/* This code was supposed to reselect the dot and comment panel after they dissapeared due to refresh, 
					but it doesn't work right yet
					if (savedSelectedSpriteNameAfterAuth != null) {
						opinionMap.curSelectedSprite = opinionMap.spriteObjects[savedSelectedSpriteNameAfterAuth];
						savedSelectedSpriteNameAfterAuth = null;
						opinionMap.refreshCommentPanel();
					}
					*/
				}
			}
			
			/**
			 * Plays the big bang effect and turns off the refreshAndBang flag
			 */ 
			public function playBigBang():void {
				if (refreshAndBang) {
					opinionMap.playBigBang();
					refreshAndBang = false;
				}
			}
			
			/**
			 * Brings user to the welcome page. Depending on usage, perhaps add
			 * a sendRefreshOS(). There is none for now 
			 */ 
			public function clickOpinionSpace(value:String = "menu_logo"):void {
				this.log.logUserEvent(this.opinionSpaceId,
					Log.USER_BUTTONCLICK, value);
					
				if ((!isUserAuthenticated || Configuration.SPLASH_PAGE_RETURN) && opinionMap.mapOverlay.currentState != 'signup')
				{
					currentState = 'welcome';
				}
				else
				{
					currentState = 'home';
				}
			}
			
			/**
			 * Callback handler for getUserCommentScore.
			 * Retrieves the new comment score and sets it to the public variable userCommentScoreDecoded
			 */ 
			private function handleGetUserCommentScore():void {
				var decoded:Object = JSON.decode(getUserCommentScore.lastResult.toString());
				getUserCommentScore.disconnect();//kill connection after its use is over
				
				userCommentScoreDecoded = decoded["cur_user_comment_score"];
				userCommentNormalizedScoreDecoded = decoded['cur_user_normalized_score'];
				
				// ADDED FOR 2.0
				if (userCommentScoreDecoded.length > 0) userCommentScore = userCommentScoreDecoded[0][0];
				if (userCommentNormalizedScoreDecoded.length > 0) userCommentNormalizedScore = userCommentNormalizedScoreDecoded[0][0];
				
				opinionMap.refreshUserDotSize();			
			}
			
			/**
			 * Brings up and down the otherDialogs box in the footer
			 */ 
			private function toggleRelatedLinks():void {
				if (otherDialogs.visible) {
					otherDialogs.visible = false;
					otherDialogs.includeInLayout = false;					
				} else {
					otherDialogs.visible = true;
					otherDialogs.includeInLayout = true;
				}
			}
			
			/**
			 * Hides the otherDialogs box in the footer
			 */ 
			public function hideRelatedLinks():void {		
				otherDialogs.visible = false;
				otherDialogs.includeInLayout = false;
			}
			
			/**
			 * 2010.09.29
			 * Temporary for now, until all design changes are done. Then we will decide
			 * whether this function is necessary
			 * 
			 * Adds the header and footer, and makes the map vbox visible
			 * 
			 */ 
			public function displayOpinionMap():void
			{
				/* Start temporary code until graphic overhaul is done */
				if(!opinionMapVBox.visible)
					opinionMapVBox.visible = true;
				
				if (Configuration.WELCOME_PAGE_SHOW_HEADER)
					headerCanvas.height = 42;
				else
				{
					if (headerCanvas.height == 0)
					{
						headerCanvas.height = 42;
					}					
				}
				/*
				if (!footerCanvas.visible)
				{
					footerCanvas.visible = true;
					footerCanvas.includeInLayout = true;
				}
				*/
				/* End temporary code until graphic overhaul is done */
			}
			
			/**
			 * 2010.09.29
			 * Temporary for now, until all design changes are done. Then we will decide
			 * whether this function is necessary
			 * 
			 * Removes the header and footer, and hides the map vbox
			 * 
			 */ 
			public function removeOpinionMap():void
			{
				/* Start temporary code until graphic overhaul is done */
				if(opinionMapVBox.visible)
					opinionMapVBox.visible = false;
				
				if (Configuration.WELCOME_PAGE_SHOW_HEADER)
					headerCanvas.height = 42;
				else
				{
					if (headerCanvas.height != 0)
					{
						headerCanvas.height = 0;
					}					
				}
				
				/*if (footerCanvas.visible)
				{
					footerCanvas.visible = false;
					footerCanvas.includeInLayout = false;
				}*/
				/* End temporary code until graphic overhaul is done */
				
			}
			
			public function handleEntryCode():void
			{
				var decodedResult:Object = JSON.decode(sendEntryCode.lastResult.toString());
				if(decodedResult['username'] == null || decodedResult['username'] == "" || registeredUsername.toLowerCase() != decodedResult['username'])
				{
					Alert.show("Using this application requires a proper entry code");
				}
				else
				{
					opinionMenu.currentState = 'loggedIn';
					
					if(!loadingScreen.visible)
						loadingScreen.visible = true;
					
					if(!Configuration.SPLASH_PAGE_RETURN)					
						displayOpinionMap();
				}
			}
			
			public function refreshStats():void
			{
				if(isUserAuthenticated){					
					
					if (this.opinionMap.selectedDiscussionStatementId == -1) 
						getStats.url = this.httpUtils.getServiceUrl('os/stats/' + opinionSpaceId + '/');
					else
						getStats.url = this.httpUtils.getServiceUrl('os/stats/' + opinionSpaceId + '/' + this.opinionMap.selectedDiscussionStatementId + "/");
					
					var parameters:Object = new Object();
					if (Configuration.USE_ENTRY_CODES)
						parameters['entrycode'] = this.ENTRY_CODE;					
					getStats.send(parameters);
					ratingModule.statsModule.loading = true;
					//ratingModule.statsModule.loadStats();
				}
			}
			
			public function refreshNotifications(viewNotifications:Boolean = false):void
			{
				if(isUserAuthenticated){					
					
					if (this.opinionMap.selectedDiscussionStatementId == -1) 
						getNotifications.url = this.httpUtils.getServiceUrl('os/notifications/' + opinionSpaceId + '/');
					else
						getNotifications.url = this.httpUtils.getServiceUrl('os/notifications/' + opinionSpaceId + '/' + this.opinionMap.selectedDiscussionStatementId + "/");
					
					
					var parameters:Object = new Object();
					if (Configuration.USE_ENTRY_CODES)
						parameters['entrycode'] = this.ENTRY_CODE;
					
					if(viewNotifications)
						parameters['view_notifications'] = true;

					getNotifications.send(parameters);
					ratingModule.notificationModule.loading = true;
				}
			}
			
			private function handleGetStats():void
			{
				var decoded:Object = JSON.decode(getStats.lastResult.toString());
				// TODO: Better error handling for auth errors
                if (AuthenticationUtils.resultIsAuthRequired(decoded))
                	return;
				
				if(	decoded["user_agreement_buckets"] == null || decoded["user_insight_buckets"] == null ||
					decoded["other_agreement_buckets"] == null || decoded["other_insight_buckets"] == null)
					return;
					
				if(userAgreementBuckets != null || userInsightBuckets != null)
				{
					if(userAgreementBuckets.toString() != decoded["user_agreement_buckets"].toString() || 
						userInsightBuckets.toString() != decoded["user_insight_buckets"].toString())
					{
						userAgreementBuckets = decoded["user_agreement_buckets"];
						userInsightBuckets = decoded["user_insight_buckets"];
						//Alert.show("You've just been rated");
					}
				}
				else
				{
					userAgreementBuckets = decoded["user_agreement_buckets"];
					userInsightBuckets = decoded["user_insight_buckets"];
				}
				
				otherAgreementBuckets = decoded["other_agreement_buckets"];
				otherInsightBuckets = decoded["other_insight_buckets"];
				
				numUserRatings = decoded['user_num_rated'];
				numUserRatedBy = decoded['user_num_rated_by'];
				numUserRatedByWithComments = decoded['user_num_rated_by_with_comments'];
				numNewComments = decoded['num_new_comments'];
				numRatedUpdatedComments = decoded['num_rated_updated_comments'];
				numSuggestions = decoded['num_suggestions'];
				userSuggesterScore = decoded['suggestion_score_sum'];
				userCommentScoreDecoded = decoded['cur_user_comment_score'];
				commentRank =  decoded['comment_rank'];
				commentRankTotal =  decoded['comment_rank_total'];
				
				if (userCommentScoreDecoded.length > 0) userCommentScore = userCommentScoreDecoded[0][0];
				else userCommentScore = 0;
				
				//if stats_box is already visible
				ratingModule.statsModule.loadStats();//refresh the graphs
				
				ratingModule.statsModule.loading = false;
				
				// refresh the user's dot
				opinionMap.refreshIdea("curUser");
			}
			
			private function handleGetNotifications():void
			{
				var decoded:Object = JSON.decode(getNotifications.lastResult.toString());
			
				// TODO: Better error handling for auth errors
				
                if (AuthenticationUtils.resultIsAuthRequired(decoded) || decoded['timestamp'] < lastNotification)
                	return;
				//Alert.show((decoded['timestamp'] - lastNotification) + ""); 
				lastNotification = decoded['timestamp'];
				notificationDictArray = decoded['notifications'];
				
				if(ratingModule != null)//if the rating module has been created refresh it
					ratingModule.notificationModule.updateNotificationsHistory();
				
				ratingModule.notificationModule.loading = false;
			}
			
			/**
			 * Initializes the layout between the normal and vertical orientation
			 */ 
			private function initLayout():void
	        {
	        	// For Facebook, where the width is 520px
	        	if (Configuration.VERTICAL_ORIENTATION)
	        	{
	        		ratingModule.respond_to_comment.width = 225;
	        		
	        	}
	        	opinionMap.initLayoutBindings();
	        	opinionMap.initLayout();
	        }
		]]>
	</mx:Script>
	
	<mx:NumberFormatter id="scoreFormatter" precision="1" useThousandsSeparator="true" />
	<mx:NumberFormatter id="collectedFormatter" useThousandsSeparator="true" />
	
	<utils:ExtendedHTTPService id="sendEntryCode" useProxy="false" method="POST" resultFormat="text" result="handleEntryCode()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="createOS" resultFormat="text" result="handleCreateOS()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="refreshOS" resultFormat="text" result="handleRefreshOS()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="getUserCommentScore" resultFormat="text" result="handleGetUserCommentScore()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="getStats" method="POST" resultFormat="text" result="handleGetStats()" fault="handleFaultOrTimeout(event)"/>
	<utils:ExtendedHTTPService id="getNotifications" method="POST" resultFormat="text" result="handleGetNotifications()" fault="handleFaultOrTimeout(event)"/>
	
    <mx:Fade id="fade" duration="300"/>
    <mx:Fade id="panelFade" duration="200"/>
    
 	<mx:VBox width="100%" height="100%" horizontalAlign="center" verticalAlign="top" verticalGap="0">
 	
 		<!-- Use a canvas to place the main as the lower child in relation to the headerCanvas -->
	    <mx:Canvas id="appCanvas" width="100%" height="100%" backgroundColor="#ffffff" minWidth="{Configuration.MIN_WIDTH}" minHeight="{Configuration.MIN_HEIGHT}">
			<mx:Canvas id="main" top="{headerCanvas.height}" left="0" width="100%" height="100%">
				<mx:Canvas id="outerCanvas" label="Home" width="100%" height="100%" horizontalScrollPolicy="{Configuration.UNILEVER_WELCOME_PAGE}" verticalScrollPolicy="{Configuration.UNILEVER_WELCOME_PAGE}">
					<mx:VBox id="page" width="100%" height="100%">
			        </mx:VBox>
				</mx:Canvas>
				<mx:Canvas styleName="outerCanvasBorder" width="100%" height="100%">
					<mx:Canvas id="topOverlay" width="100%" height="100%">
			        </mx:Canvas>
			       	<mx:Canvas id="loadingScreen" styleName="loadingScreen" width="100%" height="100%" visible="false" showEffect="{fade}" hideEffect="{fade}">
			           <mx:Label text="LOADING..." styleName="loadingLabel" id="label1"/>
			        </mx:Canvas>			        
				</mx:Canvas>
		    </mx:Canvas>	    	
		    <mx:HBox id="headerCanvas" width="100%" height="60" top="0" left="0" styleName="headerCanvasBox" minWidth="{Configuration.MIN_WIDTH}">
		    	<mx:HBox height="100%" horizontalAlign="left" verticalAlign="middle" horizontalGap="40" paddingLeft="10">
		    		<mx:Image includeInLayout="{Configuration.HEADER_IMAGE}" visible="{Configuration.HEADER_IMAGE}" source="{Configuration.HEADER_IMAGE_SOURCE}" buttonMode="{Configuration.HEADER_IMAGE_LINK!=''}" click="{if(Configuration.HEADER_IMAGE_LINK!='')httpUtils.openLinkNewWindow(Configuration.HEADER_IMAGE_LINK)}"/>
					
					<!--<mx:LinkButton styleName="headerText" label="{Configuration.HEADER_TITLE}" enabled="{!Configuration.UNILEVER_WELCOME_PAGE}" click="clickOpinionSpace()"/>
		    		<mx:HBox verticalAlign="bottom" height="100%" paddingBottom="5">
		    			<mx:Text styleName="miniHeaderText" text="{Configuration.HEADER_TITLE_VERSION}" />	
		    		</mx:HBox>-->					
					
					<mx:Text id="headerTopicText" styleName="headerText" text="{'Topic: '+opinionMap.currentTopicText.text}"/>
					
					<!-- Hidden stuff we might need later -->
		    		<mx:Box visible="false" includeInLayout="false">
		    			<mx:Text id="osNameText" styleName="headerText" />
		    		</mx:Box>

		    	</mx:HBox>		    		
				<mx:HBox height="100%" width="100%" horizontalAlign="right" verticalAlign="middle" horizontalGap="0" paddingRight="10" >
					<mx:Text id="networkError" width="100%" fontWeight="bold" fontSize="14" height="20" color="#FF0000" styleName="error" text="{registrationNetworkError}" visible="false" includeInLayout="false"/>
					<mx:Text styleName="menuText" text="{'WELCOME ' + String(registeredUsername).toUpperCase()}" visible="false" includeInLayout="false" paddingTop="3" paddingRight="10"/>
					<core:OpinionMenu id="opinionMenu"/>
	    		</mx:HBox>
		    </mx:HBox>
		    
			<mx:VBox id="otherDialogs" styleName="otherDialogsBox" visible="false" includeInLayout="false" left="370" bottom="0">
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[0]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[0])"/>
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[1]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[1])"/>
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[2]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[2])"/>
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[3]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[3])"/>
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[4]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[4])"/>
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[5]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[5])"/>
				<mx:LinkButton styleName="footerLink" label="{Configuration.ADDITIONAL_LINKS_LABELS[6]}" click="this.httpUtils.openLinkNewWindow(Configuration.ADDITIONAL_LINKS[6])"/>
			</mx:VBox>
	    </mx:Canvas>
	    
		<mx:HBox id="footerCanvas" styleName="headerCanvasBox" width="100%" height="40" verticalAlign="middle" minWidth="{Configuration.MIN_WIDTH}" horizontalCenter="0" paddingLeft="10" paddingRight="10" visible="false" includeInLayout="false">
			<!--Left Footer-->
		<!--	<mx:Image source="{Configuration.LOGO_FOOTER_LEFT}" click="{if(Configuration.FOOTER_LEFT_LINK != '')this.httpUtils.openLinkNewWindow(Configuration.FOOTER_LEFT_LINK)}" buttonMode="{Configuration.FOOTER_LEFT_LINK != ''}"/>
			<mx:LinkButton name="about-hwl-site" label="{Configuration.FOOTER_LEFT_TEXT}" styleName="headerText" click="{if(Configuration.FOOTER_LEFT_LINK != '')this.httpUtils.openLinkNewWindow(Configuration.FOOTER_LEFT_LINK)}" visible="{Configuration.FOOTER_LEFT_TEXT != ''}" includeInLayout="{Configuration.FOOTER_LEFT_TEXT != ''}" left="0"/>
			
			<mx:Spacer width="100%"/>
			

			<mx:Image source="{Configuration.FOOTER_RIGHT_LOGO_SOURCE}" click="{if(Configuration.FOOTER_RIGHT_LINK != '')this.httpUtils.openLinkNewWindow(Configuration.FOOTER_RIGHT_LINK)}" visible="{Configuration.FOOTER_RIGHT_LOGO_SOURCE != ''}" includeInLayout="{Configuration.FOOTER_RIGHT_LOGO_SOURCE != ''}" buttonMode="{Configuration.FOOTER_RIGHT_LINK != ''}"/>
			<mx:LinkButton name="whatis" label="{Configuration.FOOTER_RIGHT_TEXT}" styleName="headerText" click="{this.httpUtils.openLinkNewWindow('http://hybridwisdom.com/main-site/?whatis=true')}" visible="{Configuration.FOOTER_RIGHT_TEXT != ''}" includeInLayout="{Configuration.FOOTER_RIGHT_TEXT != ''}" right="0" />
		-->	
			<mx:Text styleName="headerText" text="{Configuration.SPONSOR_TEXT}" visible="{Configuration.SPONSOR_TEXT != ''}" includeInLayout="{Configuration.SPONSOR_TEXT != ''}" right="0"/>
			<mx:Image source="{Configuration.SPONSOR_LOGO5}" visible="{Configuration.SPONSOR_LOGO5 != null}" includeInLayout="{Configuration.SPONSOR_LOGO5 != null}"/>
			<mx:Image source="{Configuration.SPONSOR_LOGO4}" visible="{Configuration.SPONSOR_LOGO4 != null}" includeInLayout="{Configuration.SPONSOR_LOGO4 != null}"/>
			<mx:Image source="{Configuration.SPONSOR_LOGO3}" visible="{Configuration.SPONSOR_LOGO3 != null}" includeInLayout="{Configuration.SPONSOR_LOGO3 != null}"/>
			<mx:Image source="{Configuration.SPONSOR_LOGO2}" visible="{Configuration.SPONSOR_LOGO2 != null}" includeInLayout="{Configuration.SPONSOR_LOGO2 != null}"/>
			<mx:Image source="{Configuration.SPONSOR_LOGO1}" visible="{Configuration.SPONSOR_LOGO1 != null}" includeInLayout="{Configuration.SPONSOR_LOGO1 != null}" right="0" buttonMode="{Configuration.SPONSOR_LOGO1_LINK!=''}" click="{if(Configuration.SPONSOR_LOGO1_LINK!='')httpUtils.openLinkNewWindow(Configuration.SPONSOR_LOGO1_LINK)}"/>
		</mx:HBox>
 	</mx:VBox>
 	<mx:Canvas id="fullTopOverlay" width="100%" height="{stageHeight}" verticalScrollPolicy="off" horizontalScrollPolicy="off" includeInLayout="false"/>
</mx:Application>
